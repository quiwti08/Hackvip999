-- // ==== Services ==== //
local Players            = game:GetService("Players")
local RunService         = game:GetService("RunService")
local UserInputService   = game:GetService("UserInputService")
local TweenService       = game:GetService("TweenService")
local ReplicatedStorage  = game:GetService("ReplicatedStorage")
local Camera             = workspace.CurrentCamera
local ContextActionService = game:GetService("ContextActionService")

local LocalPlayer = Players.LocalPlayer

-- // ==== Safe wait for character ==== //
local function GetChar(plr)
    plr = plr or LocalPlayer
    local ch = plr.Character or plr.CharacterAdded:Wait()
    if not ch:FindFirstChildOfClass("Humanoid") then
        ch:WaitForChild("Humanoid")
    end
    return ch
end

-- // ==== Rayfield ==== //
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "Evade Helper • Rayfield",
    LoadingTitle = "niggalol | evade",
    LoadingSubtitle = "by anhchangm52",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "EvadeHelper",
        FileName = "Settings"
    },
    KeySystem = false
})

-- Tabs
local TabMove  = Window:CreateTab("Movement", 4483362458)
local TabESP   = Window:CreateTab("ESP", 4483362458)
local TabList  = Window:CreateTab("Players", 4483362458)
local TabMisc  = Window:CreateTab("Misc", 4483362458)

-- // ==== State ==== //
local State = {
    BringEnabled = false,
    AutoRespawn = false,
    InfJump = false,
    CFrameSpeedEnabled = false,
    CFrameSpeed = 25,
    AscendEnabled = false,
    AscendSpeed = 6, -- studs/frame when enabled (clamped by dt)
    TracerEnabled = false,
    ESPEnabled = false,
    ESPNameColor = Color3.fromRGB(255, 182, 193),
    ESPOutlineColor = Color3.fromRGB(0,0,0),
    HLFillColor = Color3.fromRGB(255,182,193),
    HLOutlineColor = Color3.fromRGB(255,255,255),
    FOV = 90,
    AntiAFK = true,
    FarmStreak = false
}

-- // ==== Anti-Idle ==== //
local VirtualUser = game:GetService("VirtualUser")
LocalPlayer.Idled:Connect(function()
    if not State.AntiAFK then return end
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

-- // ==== Utilities ==== //
local function isDowned(char)
    if not char then return false end
    -- Prefer Attributes
    if char:GetAttribute("Downed") == true then return true end
    local hum = char:FindFirstChildOfClass("Humanoid")
    if hum and hum:GetAttribute("Downed") == true then return true end
    -- Legacy BoolValue fallback
    local b = char:FindFirstChild("Downed")
    if b and b:IsA("BoolValue") and b.Value == true then return true end
    return false
end

local function getHRP(char)
    char = char or GetChar()
    return char and char:FindFirstChild("HumanoidRootPart")
end

local function getHumanoid(char)
    char = char or GetChar()
    return char and char:FindFirstChildOfClass("Humanoid")
end

-- // ==== Auto Respawn (toggle) ==== //
RunService.Stepped:Connect(function()
    if not State.AutoRespawn then return end
    local ch = LocalPlayer.Character
    if ch and isDowned(ch) then
        local ev = ReplicatedStorage:FindFirstChild("Events")
        ev = ev and ev:FindFirstChild("Player")
        ev = ev and ev:FindFirstChild("ChangePlayerMode")
        if ev then
            ev:FireServer(true)
        end
    end
end)

-- // ==== Infinite Jump ==== //
UserInputService.JumpRequest:Connect(function()
    if not State.InfJump then return end
    local hum = getHumanoid()
    if hum then hum:ChangeState(Enum.HumanoidStateType.Jumping) end
end)

-- // ==== CFrame Speed ==== //
RunService.Heartbeat:Connect(function(dt)
    if not State.CFrameSpeedEnabled then return end
    local ch = LocalPlayer.Character
    local hum = getHumanoid(ch)
    local hrp = getHRP(ch)
    if not (hum and hrp) then return end
    local dir = hum.MoveDirection
    if dir.Magnitude > 0 then
        local step = State.CFrameSpeed * dt
        hrp.CFrame = hrp.CFrame + dir * step
    end
end)

-- // ==== Ascend Mode (CFrame) ==== //
RunService.Heartbeat:Connect(function(dt)
    if not State.AscendEnabled then return end
    local hrp = getHRP()
    if not hrp then return end
    local step = State.AscendSpeed * dt
    hrp.CFrame = hrp.CFrame + Vector3.new(0, step, 0)
end)

-- // ==== Farm Streak ==== //
RunService.Stepped:Connect(function()
    if not State.FarmStreak then return end
    local hrp = getHRP()
    if hrp then
        hrp.Position = Vector3.new(9999, 9999, 9999)
    end
end)

-- // ==== FOV ==== //
RunService.Heartbeat:Connect(function()
    Camera.FieldOfView = State.FOV
end)

RunService.Stepped:Connect(function()
    if not State.BringEnabled or not selectedPlayer or not selectedPlayer.Character or not LocalPlayer.Character then return end
    local targetHRP = selectedPlayer.Character:FindFirstChild("HumanoidRootPart")
    local myHRP = getHRP(LocalPlayer.Character)
    if targetHRP and myHRP then
        targetHRP.CFrame = myHRP.CFrame + myHRP.CFrame.LookVector * 1 + Vector3.new(0, 2, 0)
    end
end)

-- // ==== ESP ==== //
-- Safe ScreenGui labels + Highlights + (optional) Drawing tracers
local EspGui = Instance.new("ScreenGui")
EspGui.Name = "SafeESP_Rayfield"
EspGui.ResetOnSpawn = false
EspGui.IgnoreGuiInset = true
EspGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

local espLabels = {}      -- [player] = TextLabel
local espHighlights = {}  -- [player] = Highlight
local tracers = {}        -- [player] = Drawing Line

local function destroyESPFor(plr)
    local lab = espLabels[plr]
    if lab then lab:Destroy() end
    espLabels[plr] = nil

    local hl = espHighlights[plr]
    if hl then hl:Destroy() end
    espHighlights[plr] = nil

    local tr = tracers[plr]
    if tr then tr:Remove() end
    tracers[plr] = nil
end

local function ensureESPFor(plr)
    -- Label
    if not espLabels[plr] then
        local label = Instance.new("TextLabel")
        label.BackgroundTransparency = 1
        label.TextColor3 = State.ESPNameColor
        label.TextStrokeTransparency = 0.3
        label.TextStrokeColor3 = State.ESPOutlineColor
        label.Font = Enum.Font.GothamSemibold
        label.TextSize = 14
        label.Size = UDim2.new(0, 200, 0, 20)
        label.AnchorPoint = Vector2.new(0.5, 0.5)
        label.Visible = false
        label.Parent = EspGui
        espLabels[plr] = label
    end
    -- Highlight
    if not espHighlights[plr] then
        local hl = Instance.new("Highlight")
        hl.Enabled = false
        hl.FillTransparency = 0.7
        hl.OutlineTransparency = 0.2
        hl.FillColor = State.HLFillColor
        hl.OutlineColor = State.HLOutlineColor
        hl.Parent = EspGui
        espHighlights[plr] = hl
    end
    -- Tracer (Drawing API)
    if State.TracerEnabled and not tracers[plr] and Drawing then
        local line = Drawing.new("Line")
        line.Visible = false
        line.Thickness = 1.5
        line.Color = State.ESPNameColor
        tracers[plr] = line
    end
end

local function updateEspColors()
    for _, label in pairs(espLabels) do
        label.TextColor3 = State.ESPNameColor
        label.TextStrokeColor3 = State.ESPOutlineColor
    end
    for _, hl in pairs(espHighlights) do
        hl.FillColor = State.HLFillColor
        hl.OutlineColor = State.HLOutlineColor
    end
    for _, tr in pairs(tracers) do
        if tr then tr.Color = State.ESPNameColor end
    end
end

-- Render
RunService.RenderStepped:Connect(function()
    if not State.ESPEnabled then
        for _, l in pairs(espLabels) do l.Visible = false end
        for _, h in pairs(espHighlights) do h.Enabled = false end
        for _, t in pairs(tracers) do if t then t.Visible = false end end
        return
    end

    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("Head") then
            local ch = plr.Character
            local hum = ch:FindFirstChildOfClass("Humanoid")
            if hum and hum.Health > 0 then
                local downed = isDowned(ch)
                ensureESPFor(plr)
                local headPos = ch.Head.Position
                local screenPos, onScreen = Camera:WorldToViewportPoint(headPos)

                -- Label
                local label = espLabels[plr]
                label.Text = plr.DisplayName .. (downed and " [DOWNED]" or "")
                label.Visible = onScreen
                if onScreen then
                    label.Position = UDim2.fromOffset(screenPos.X, screenPos.Y - 18)
                end

                -- Highlight
                local hl = espHighlights[plr]
                hl.Adornee = ch
                hl.Enabled = true

                -- Tracer
                if State.TracerEnabled then
                    if not tracers[plr] and Drawing then
                        ensureESPFor(plr)
                    end
                    local line = tracers[plr]
                    if line then
                        if onScreen then
                            line.Visible = true
                            line.From = Vector2.new(Camera.ViewportSize.X/2, Camera.ViewportSize.Y)
                            line.To = Vector2.new(screenPos.X, screenPos.Y)
                        else
                            line.Visible = false
                        end
                    end
                else
                    if tracers[plr] then tracers[plr]:Remove() tracers[plr] = nil end
                end
            else
                destroyESPFor(plr)
            end
        else
            destroyESPFor(plr)
        end
    end
end)

Players.PlayerRemoving:Connect(function(plr)
    destroyESPFor(plr)
end)

-- // ==== Rayfield: Movement Tab ==== //
TabMove:CreateToggle({
    Name = "CFrame Speed",
    CurrentValue = State.CFrameSpeedEnabled,
    Flag = "CFSpd",
    Callback = function(v) State.CFrameSpeedEnabled = v end
})
TabMove:CreateSlider({
    Name = "Speed",
    Range = {5, 120},
    Increment = 1,
    Suffix = "stud/s",
    CurrentValue = State.CFrameSpeed,
    Flag = "CFSpdVal",
    Callback = function(val) State.CFrameSpeed = val end
})
TabMove:CreateToggle({
    Name = "Ascend Mode (CFrame)",
    CurrentValue = State.AscendEnabled,
    Flag = "JBEnable",
    Callback = function(v) State.AscendEnabled = v end
})
TabMove:CreateSlider({
    Name = "Ascend Speed (CFrame)",
    Range = {2, 50},
    Increment = 1,
    Suffix = "units/s",
    CurrentValue = State.AscendSpeed,
    Flag = "JBVal",
    Callback = function(val) State.AscendSpeed = val end
})
TabMove:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = State.InfJump,
    Flag = "InfJump",
    Callback = function(v) State.InfJump = v end
})

-- // ==== Rayfield: ESP Tab ==== //
TabESP:CreateToggle({
    Name = "ESP Master Switch",
    CurrentValue = State.ESPEnabled,
    Flag = "ESPEnabled",
    Callback = function(v) State.ESPEnabled = v end
})
TabESP:CreateToggle({
    Name = "Tracer (Drawing)",
    CurrentValue = State.TracerEnabled,
    Flag = "Tracer",
    Callback = function(v) 
        State.TracerEnabled = v 
        if not v then
            for _, tr in pairs(tracers) do
                if tr then tr:Remove() end
            end
            tracers = {}
        end
    end
})

local cp1 = TabESP:CreateColorPicker({
    Name = "Name/Tracer Color",
    Color = State.ESPNameColor,
    Flag = "ESPNameColor",
    Callback = function(c) State.ESPNameColor = c; updateEspColors() end
})
local cp2 = TabESP:CreateColorPicker({
    Name = "Name Outline Color",
    Color = State.ESPOutlineColor,
    Flag = "ESPOutlineColor",
    Callback = function(c) State.ESPOutlineColor = c; updateEspColors() end
})
local cp3 = TabESP:CreateColorPicker({
    Name = "Highlight Fill",
    Color = State.HLFillColor,
    Flag = "HLFillColor",
    Callback = function(c) State.HLFillColor = c; updateEspColors() end
})
local cp4 = TabESP:CreateColorPicker({
    Name = "Highlight Outline",
    Color = State.HLOutlineColor,
    Flag = "HLOutlineColor",
    Callback = function(c) State.HLOutlineColor = c; updateEspColors() end
})

-- // ==== Rayfield: Players Tab ==== //
local selectedPlayer = nil
local PlayerDrop

local function refreshDropdown()
    if not PlayerDrop then return end

    local names = {}
    for _,plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer then
            table.insert(names, plr.Name)
        end
    end

    PlayerDrop:Refresh(names)

    -- giữ người đang chọn nếu họ còn trong danh sách
    if selectedPlayer and table.find(names, selectedPlayer.Name) then
        PlayerDrop:Set(selectedPlayer.Name)
    else
        selectedPlayer = nil
    end
end

PlayerDrop = TabList:CreateDropdown({
    Name = "Players",
    Options = {},
    CurrentOption = "",
    MultipleOptions = false,
    Flag = "PlayersDropdown",
    Callback = function(opt)
        local name = type(opt)=="table" and opt[1] or opt
        selectedPlayer = Players:FindFirstChild(name)
    end
})

-- Nút View (Spectate)
TabList:CreateButton({
    Name = "View (Spectate)",
    Callback = function()
        if selectedPlayer and selectedPlayer.Character then
            local hum = selectedPlayer.Character:FindFirstChildOfClass("Humanoid")
            if hum then Camera.CameraSubject = hum end
        end
    end
})

-- Nút Go To (Teleport near)
TabList:CreateButton({
    Name = "Go To (Teleport near)",
    Callback = function()
        if selectedPlayer and selectedPlayer.Character and LocalPlayer.Character then
            local targetHRP = selectedPlayer.Character:FindFirstChild("HumanoidRootPart")
            local myHRP = getHRP(LocalPlayer.Character)
            if targetHRP and myHRP then
                myHRP.CFrame = targetHRP.CFrame + targetHRP.CFrame.LookVector * -2 + Vector3.new(0,2,0)
            end
        end
    end
})

TabList:CreateToggle({
    Name = "Bring (Teleport to Me)",
    CurrentValue = State.BringEnabled,
    Flag = "BringEnabled",
    Callback = function(v) State.BringEnabled = v end
})

-- auto refresh list mỗi 2s
task.spawn(function()
    while task.wait(2) do
        refreshDropdown()
    end
end)

-- // ==== Rayfield: Misc Tab ==== //
TabMisc:CreateSlider({
    Name = "FOV",
    Range = {70, 120},
    Increment = 1,
    Suffix = "deg",
    CurrentValue = State.FOV,
    Flag = "FOV",
    Callback = function(v) State.FOV = v end
})

TabMisc:CreateToggle({
    Name = "Auto Respawn (when Downed)",
    CurrentValue = State.AutoRespawn,
    Flag = "AutoRespawn",
    Callback = function(v) State.AutoRespawn = v end
})

TabMisc:CreateToggle({
    Name = "Anti-AFK",
    CurrentValue = State.AntiAFK,
    Flag = "AntiAFK",
    Callback = function(v) State.AntiAFK = v end
})

TabMisc:CreateToggle({
    Name = "Farm Streak",
    CurrentValue = State.FarmStreak,
    Flag = "FarmStreak",
    Callback = function(v) State.FarmStreak = v end
})

-- // Cleanup when character respawns: keep ESP attached
LocalPlayer.CharacterAdded:Connect(function(ch)
    task.wait(0.2)
    Camera.FieldOfView = State.FOV
end)