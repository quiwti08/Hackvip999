local Players = game:GetService("Players")
local UIS     = game:GetService("UserInputService")
local Run     = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local VIM = game:GetService("VirtualInputManager")
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local LocalPlayer = Players.LocalPlayer
local LP      = Players.LocalPlayer
local Mouse   = LP:GetMouse()
local Cam     = workspace.CurrentCamera
local rs = game:GetService("RunService")
local uis = game:GetService("UserInputService")
local lp = game.Players.LocalPlayer

game:GetService("RunService").Stepped:Connect(
    function()
        game.Players.LocalPlayer.Character.Animate.idle.Animation1.AnimationId = "http://www.roblox.com/asset/?id=133806214992291"
        game.Players.LocalPlayer.Character.Animate.idle.Animation2.AnimationId = "http://www.roblox.com/asset/?id=94970088341563"
        game.Players.LocalPlayer.Character.Animate.run.RunAnim.AnimationId = "http://www.roblox.com/asset/?id=616163682"
        game.Players.LocalPlayer.Character.Animate.jump.JumpAnim.AnimationId = "http://www.roblox.com/asset/?id=656117878"
        game.Players.LocalPlayer.Character.Animate.fall.FallAnim.AnimationId = "http://www.roblox.com/asset/?id=707829716"
    end
)

-- Danh sách animation (URL đầy đủ)
local animations = {
	C = "http://www.roblox.com/asset/?id=15609995579",
}

local currentTrack = nil
local currentKey = nil
local renderConnection = nil
local inputConnection = nil

local function setup(char)
	local hum = char:WaitForChild("Humanoid", 5)
	if not hum then return end

	local animator = hum:FindFirstChildOfClass("Animator") or Instance.new("Animator", hum)

	-- Ngắt kết nối cũ
	if renderConnection then renderConnection:Disconnect() end
	if inputConnection then inputConnection:Disconnect() end

	-- Dừng animation nếu di chuyển
	renderConnection = rs.RenderStepped:Connect(function()
		if currentTrack and hum.MoveDirection.Magnitude > 0 then
			currentTrack:Stop()
			currentTrack = nil
			currentKey = nil
		end
	end)

	-- Nhấn phím để phát lại animation
	inputConnection = uis.InputBegan:Connect(function(input, gp)
		if gp then return end
		local key = input.KeyCode.Name
		local animId = animations[key]
		if animId and hum.MoveDirection.Magnitude == 0 then
			-- Dừng animation cũ nếu đang chạy
			if currentTrack then
				currentTrack:Stop()
				currentTrack = nil
				currentKey = nil
			end
			-- Phát animation mới
			local anim = Instance.new("Animation")
			anim.AnimationId = animId
			local track = animator:LoadAnimation(anim)
			track:Play()
			currentTrack = track
			currentKey = key
		end
	end)
end

-- Nếu đã có character
if lp.Character then
	setup(lp.Character)
end

-- Khi respawn
lp.CharacterAdded:Connect(function(char)
	currentTrack = nil
	currentKey = nil
	task.wait(0.2)
	setup(char)
end)

-- ====== CONFIG ======
local selectKey    = Enum.KeyCode.Q
local aimlockKey   = Enum.KeyCode.H
local highlightColor = Color3.fromRGB(214,112,122)
local predictionTime = 0.17221418
local aimSmoothing = 1 -- 1 = instant; <1 = smoothing (lerp factor)
local maxSelectPx = 99999 -- no hard limit; change if you want a max selection radius
local AutoPingSets = true

-- ====== STATE ======
local selected = {}   -- map player -> Highlight instance
local Notifications = {}
local Notifications_Frame = nil
local aimlockEnabled = true
local camlockEnabled = false
local stomptarget = false -- Biến mới cho stomp

local possibleRemotes = {
    "MAINEVENT",
    "MainEvent",
    "Remote",
    "Packages",
    "MainRemotes"
}  

local tracer = Drawing.new("Line")
tracer.Visible = true
tracer.Thickness = 1
tracer.Color = Color3.fromRGB(255, 255, 255)

local function getMainRemote()
    if ReplicatedStorage:FindFirstChild("MainEvent") then
        return ReplicatedStorage.MainEvent
    end
    if ReplicatedStorage:FindFirstChild("MAINEVENT") then
        return ReplicatedStorage.MAINEVENT
    end

    if ReplicatedStorage:FindFirstChild("Remote") then
        return ReplicatedStorage.Remote
    end

    -- 3. MainRemotes.MainRemoteEvent
    local mainRemotes = ReplicatedStorage:FindFirstChild("MainRemotes")
    if mainRemotes and mainRemotes:FindFirstChild("MainRemoteEvent") then
        return mainRemotes.MainRemoteEvent
    end

    -- 4. Packages.Knit.Services.ToolService.RE.UpdateAim
    local packages = ReplicatedStorage:FindFirstChild("Packages")
    if packages then
        local knit = packages:FindFirstChild("Knit")
        if knit and knit:FindFirstChild("Services") then
            local toolService = knit.Services:FindFirstChild("ToolService")
            if toolService and toolService:FindFirstChild("RE") then
                local re = toolService.RE
                if re:FindFirstChild("UpdateAim") then
                    return re.UpdateAim
                end
            end
        end
    end

    -- fallback: không tìm thấy
    return nil
end

local MainRemote = getMainRemote()

-- ====== HELPERS ======
local function GetDictionaryLength(t)
    local c = 0
    for _ in pairs(t) do c = c + 1 end
    return c
end

-- isAlive as you provided
local function isAlive(plr)
    if not plr or not plr.Character then return false end
    local hum = plr.Character:FindFirstChildOfClass("Humanoid")
    if not hum or hum.Health <= 0 then
        return false
    end

    -- Check riêng cho Da Hood (BodyEffects)
    local be = plr.Character:FindFirstChild("BodyEffects")
    if be then
        local ko = be:FindFirstChild("K.O")
        local grabbed = be:FindFirstChild("GRABBING_CONSTRAINT")
        if (ko and ko.Value) or (grabbed and grabbed.Value) then
            return false
        end
    end

    return true
end

local function isKO(plr)
    return not isAlive(plr)
end

-- Notifications (non-blocking)
local function ensureNotificationsGui()
    if Notifications_Frame and Notifications_Frame.Parent then return end
    local sg = Instance.new("ScreenGui")
    sg.Name = "TB_Notifications"
    sg.ResetOnSpawn = false
    sg.Parent = game.CoreGui

    local frame = Instance.new("Frame")
    frame.Name = "Notifications"
    frame.Size = UDim2.new(0, 300, 0, 200)
    frame.Position = UDim2.new(0.5, -150, 1, -220)
    frame.BackgroundTransparency = 1
    frame.Parent = sg
    Notifications_Frame = frame
end

local function Notify(Content, Delay)
    assert(type(Content) == "string", "missing argument #1, (string expected got " .. type(Content) .. ")")
    local Delay = type(Delay) == "number" and Delay or 3
    ensureNotificationsGui()

    local Text = Instance.new("TextLabel")
    Text.Name = "Notification"
    Text.BackgroundTransparency = 1
    Text.Position = UDim2.new(0, 0, 0, GetDictionaryLength(Notifications)*22)
    Text.Size = UDim2.new(1, 0, 0, 20)
    Text.Text = Content
    Text.Font = Enum.Font.SourceSansBold
    Text.TextSize = 16
    Text.TextColor3 = Color3.new(1,1,1)
    Text.TextStrokeTransparency = 0.4
    Text.TextTransparency = 1
    Text.RichText = false
    Text.ZIndex = 5
    Text.Parent = Notifications_Frame

    local Notification = { self = Text }
    Notifications[Notification] = Notification

    local tweenIn = TweenService:Create(Text, TweenInfo.new(0.22, Enum.EasingStyle.Quad), {TextTransparency = 0})
    local tweenOut = TweenService:Create(Text, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {TextTransparency = 1})

    tweenIn:Play()
    tweenIn.Completed:Connect(function()
        task.delay(Delay, function()
            tweenOut:Play()
            tweenOut.Completed:Connect(function()
                Notifications[Notification] = nil
                if Text and Text.Parent then Text:Destroy() end
                local idx = 0
                for k,v in pairs(Notifications) do
                    local t = v.self
                    if t and t.Parent then
                        t.Position = UDim2.new(0, 0, 0, idx * 22)
                    end
                    idx = idx + 1
                end
            end)
        end)
    end)
end

-- Highlight helpers (create once, enable/disable)
local function createOrGetHighlightForPlayer(ply)
    if not ply then return nil end
    local existing = selected[ply]
    if existing and existing:IsA("Highlight") then
        return existing
    end
    local hl = Instance.new("Highlight")
    hl.Name = "TB_Highlight"
    hl.Adornee = ply.Character or nil
    hl.FillColor = highlightColor
    hl.OutlineColor = highlightColor
    hl.FillTransparency = 0.7
    hl.OutlineTransparency = 0
    hl.Enabled = false
    hl.Parent = workspace
    selected[ply] = hl
    return hl
end

local tracers = {} -- map player -> Beam

local circles = {} 

local function createTracer(ply)
    if not LP.Character or not ply.Character then return end
    local hrp1 = LP.Character:FindFirstChild("HumanoidRootPart")
    local hrp2 = ply.Character:FindFirstChild("HumanoidRootPart")
    if not hrp1 or not hrp2 then return end

    -- Nếu đã có tracer cũ thì xóa
    if tracers[ply] then
        tracers[ply]:Destroy()
        tracers[ply] = nil
    end

    --[[ Nếu đã có vòng tròn cũ thì xóa
    if circles[ply] then
        circles[ply]:Destroy()
        circles[ply] = nil
    end]]

    -- Tạo tracer
    local att1 = Instance.new("Attachment", hrp1)
    local att2 = Instance.new("Attachment", hrp2)

    local beam = Instance.new("Beam")
    beam.Attachment0 = att1
    beam.Attachment1 = att2
    beam.Color = ColorSequence.new(Color3.fromRGB(214, 112, 122))
    beam.Width0 = 0.08
    beam.Width1 = 0.08
    beam.Parent = hrp1

    tracers[ply] = beam

    --[[ Tạo vòng tròn viền dưới chân bằng SurfaceGui
    local circlePart = Instance.new("Part")
    circlePart.Name = "TargetCircle"
    circlePart.Size = Vector3.new(6, 0.1, 6) -- đường kính ~ 6 studs
    circlePart.Anchored = false
    circlePart.CanCollide = false
    circlePart.Transparency = 1 -- part ẩn đi
    circlePart.CFrame = hrp2.CFrame * CFrame.new(0, -hrp2.Size.Y/2 - 0.05, 0)
    circlePart.Parent = workspace

    -- Weld để gắn vào HRP
    local weld = Instance.new("WeldConstraint")
    weld.Part0 = hrp2
    weld.Part1 = circlePart
    weld.Parent = circlePart

    -- SurfaceGui + UIStroke để vẽ vòng tròn viền
    local gui = Instance.new("SurfaceGui")
    gui.Face = Enum.NormalId.Top
    gui.AlwaysOnTop = true
    gui.Parent = circlePart

    local frame = Instance.new("Frame")
    frame.AnchorPoint = Vector2.new(0.5, 0.5)
    frame.Position = UDim2.new(0.5, 0, 0.5, 0)
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.BackgroundTransparency = 1
    frame.Parent = gui

    local circleCorner = Instance.new("UICorner")
    circleCorner.CornerRadius = UDim.new(1, 0)
    circleCorner.Parent = frame

    local stroke = Instance.new("UIStroke")
    stroke.Thickness = 4
    stroke.Color = Color3.fromRGB(214, 112, 122)
    stroke.Parent = frame

    circles[ply] = circlePart]]

    -- Cập nhật khi target respawn
    ply.CharacterAdded:Connect(function(newChar)
        task.wait(0.2)
        local newHrp = newChar:WaitForChild("HumanoidRootPart")

        -- cập nhật beam
        if tracers[ply] then
            local newAtt = Instance.new("Attachment", newHrp)
            tracers[ply].Attachment1 = newAtt
        end

        --[[ cập nhật circle
        if circles[ply] then
            circles[ply]:Destroy()

            local newCirclePart = Instance.new("Part")
            newCirclePart.Name = "TargetCircle"
            newCirclePart.Size = Vector3.new(6, 0.1, 6)
            newCirclePart.Anchored = false
            newCirclePart.CanCollide = false
            newCirclePart.Transparency = 1
            newCirclePart.CFrame = newHrp.CFrame * CFrame.new(0, -newHrp.Size.Y/2 - 0.05, 0)
            newCirclePart.Parent = workspace

            local newWeld = Instance.new("WeldConstraint")
            newWeld.Part0 = newHrp
            newWeld.Part1 = newCirclePart
            newWeld.Parent = newCirclePart

            local newGui = Instance.new("SurfaceGui")
            newGui.Face = Enum.NormalId.Top
            newGui.AlwaysOnTop = true
            newGui.Parent = newCirclePart

            local newFrame = Instance.new("Frame")
            newFrame.AnchorPoint = Vector2.new(0.5, 0.5)
            newFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
            newFrame.Size = UDim2.new(1, 0, 1, 0)
            newFrame.BackgroundTransparency = 1
            newFrame.Parent = newGui

            local newCorner = Instance.new("UICorner")
            newCorner.CornerRadius = UDim.new(1, 0)
            newCorner.Parent = newFrame

            local newStroke = Instance.new("UIStroke")
            newStroke.Thickness = 2
            newStroke.Color = Color3.fromRGB(214, 112, 122)
            newStroke.Parent = newFrame

            circles[ply] = newCirclePart
        end]]
    end)
end

-- Sửa hàm removeTracer để xóa cả vòng tròn
local function removeTracer(ply)
    if tracers[ply] then
        tracers[ply]:Destroy()
        tracers[ply] = nil
    end
    --[[if circles[ply] then
        circles[ply]:Destroy()
        circles[ply] = nil
    end]]
end

-- Sửa hàm removeAllTracers để xóa tất cả vòng tròn
local function removeAllTracers()
    for ply, beam in pairs(tracers) do
        if beam then beam:Destroy() end
    end
    --[[for ply, circle in pairs(circles) do
        if circle then circle:Destroy() end
    end]]
    tracers = {}
    --circles = {}
end

-- Xử lý khi LocalPlayer hồi sinh
LocalPlayer.CharacterAdded:Connect(function(newChar)
    task.wait(0.2) -- Đợi nhân vật tải hoàn tất
    -- Xóa tất cả tracer và vòng tròn cũ
    removeAllTracers()
    
    -- Tái tạo tracer và vòng tròn cho tất cả mục tiêu đang được chọn
    for ply, hl in pairs(selected) do
        if ply and hl and hl.Enabled and ply.Character then
            createTracer(ply) -- Gắn lại tracer và vòng tròn
        end
    end
end)

local function addHighlightToPlayer(ply)
    if not ply then return end
    local hl = createOrGetHighlightForPlayer(ply)
    if hl then
        hl.Adornee = ply.Character or hl.Adornee
        hl.Enabled = true
    end
end

local function removeHighlightFromPlayer(ply)
    if not ply then return end
    local hl = selected[ply]
    if hl and hl:IsA("Highlight") then
        pcall(function() hl.Enabled = false end)
    end
end

local function fullyRemoveHighlight(ply)
    if not ply then return end
    local hl = selected[ply]
    if hl and hl.Destroy then
        pcall(function() hl:Destroy() end)
    end
    selected[ply] = nil
end

local function toggleSelectPlayer(ply)
    if not ply then return end
    local hl = createOrGetHighlightForPlayer(ply)
    if hl and hl.Enabled then
        removeHighlightFromPlayer(ply)
        removeTracer(ply) -- gỡ tracer khi bỏ chọn
        Notify(string.format("Deselected %s (@%s)", ply.DisplayName or ply.Name, ply.Name), 2)
        -- Thay đổi hình ảnh ImageButton khi unselected
        ImageButton.Image = "rbxassetid://140623923630784"
        -- Chờ 1 giây rồi đổi lại hình ảnh gốc
        task.spawn(function()
            task.wait(1)
            ImageButton.Image = "rbxassetid://96086736054343"
        end)
    else
        addHighlightToPlayer(ply)
        createTracer(ply) -- tạo tracer khi chọn
        Notify(string.format("Selected %s (@%s)", ply.DisplayName or ply.Name, ply.Name), 3)
        ImageButton.Image = "rbxassetid://96086736054343"
    end
end

-- Distance from world pos to mouse cursor in px (no visibility check here)
local function distToCursorFromWorldPos(pos)
    local v = Cam:WorldToViewportPoint(pos)
    local screenPos = Vector2.new(v.X, v.Y)
    local mousePos = UIS:GetMouseLocation()
    return (screenPos - Vector2.new(mousePos.X, mousePos.Y)).Magnitude
end

-- VISIBILITY CHECK: returns true if direct line from camera to targetHead hits the target (or nothing)
local function isVisibleFromCamera(targetHead)
    if not targetHead or not targetHead.Position then return false end
    local origin = Cam.CFrame.Position
    local direction = (targetHead.Position - origin)
    local params = RaycastParams.new()
    params.FilterType = Enum.RaycastFilterType.Blacklist
    -- ignore local character so it doesn't block
    if LP.Character then
        params.FilterDescendantsInstances = {LP.Character}
    else
        params.FilterDescendantsInstances = {}
    end
    local res = workspace:Raycast(origin, direction, params)
    if not res then
        -- nothing hit => clear line
        return true
    end
    if res.Instance and res.Instance:IsDescendantOf(targetHead.Parent) then
        return true
    end
    return false
end

-- get nearest SELECTED, ALIVE, VISIBLE player to cursor (head target). returns player or nil
local function getNearestSelectedAliveVisible()
    local best, bestDist = nil, math.huge
    for ply, hl in pairs(selected) do
        if ply and hl and hl.Enabled then
            if isAlive(ply) and ply.Character then
                local head = ply.Character:FindFirstChild("Head")
                if head and head.Position then
                    if isVisibleFromCamera(head) then
                        local d = distToCursorFromWorldPos(head.Position)
                        if d < bestDist and d <= maxSelectPx then
                            bestDist = d
                            best = ply
                        end
                    end
                end
            end
        end
    end
    return best, bestDist
end

local function getNearestSelectedPlayer()
    local best, bestDist = nil, math.huge
    for ply, hl in pairs(selected) do
        if ply and hl and hl.Enabled and isAlive(ply) and ply.Character then
            local root = ply.Character:FindFirstChild("HumanoidRootPart") or ply.Character.PrimaryPart
            if root then
                local dist = (root.Position - Cam.CFrame.Position).Magnitude
                if dist < bestDist then
                    bestDist = dist
                    best = ply
                end
            end
        end
    end
    return best
end

-- cleanup when players leave
Players.PlayerRemoving:Connect(function(p)
    if selected[p] then fullyRemoveHighlight(p) end
end)

-- respawn handling
local function onCharacterAdded(char)
    local ply = Players:GetPlayerFromCharacter(char)
    if ply then
        local hl = selected[ply]
        if hl and hl:IsA("Highlight") then
            hl.Adornee = char
            -- keep enabled/disabled state as before
        end
    end
end
Players.PlayerAdded:Connect(function(p) p.CharacterAdded:Connect(onCharacterAdded) end)
for _,p in ipairs(Players:GetPlayers()) do p.CharacterAdded:Connect(onCharacterAdded) end

-- ====== SELECT INPUT ======
UIS.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.UserInputType == Enum.UserInputType.Keyboard then
        if input.KeyCode == selectKey then
            -- find nearest player to cursor (across all players) — this is for toggling selection
            local best, bestDist = nil, math.huge
            for _,p in ipairs(Players:GetPlayers()) do
                if p ~= LP and p.Character then
                    local root = p.Character:FindFirstChild("HumanoidRootPart") or p.Character:FindFirstChild("UpperTorso") or p.Character.PrimaryPart
                    if root and root.Position then
                        local d = distToCursorFromWorldPos(root.Position)
                        if d < bestDist then
                            bestDist = d
                            best = p
                        end
                    end
                end
            end

            if best then
                toggleSelectPlayer(best)
            else
                Notify("No valid target found.", 2)
            end
            return
        end

        if input.KeyCode == aimlockKey then
            aimlockEnabled = not aimlockEnabled
            if aimlockEnabled then
                Notify("Aimlock: ON", 2)
            else
                pcall(function()
                    if LP.Character then
                        local hum = LP.Character:FindFirstChildOfClass("Humanoid")
                        if hum then Cam.CameraSubject = hum end
                    end
                end)

                for ply, hl in pairs(selected) do
                    fullyRemoveHighlight(ply) -- xóa highlight
                    removeTracer(ply)         -- xóa tracer
                end
                selected = {}
                Notify("Aimlock: OFF", 2)
            end
            return
        end
    end
end)

UIS.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if input.KeyCode == Enum.KeyCode.B then
        camlockEnabled = not camlockEnabled
        if camlockEnabled then
            local target = getNearestSelectedPlayer()
            if target and target.Character then
                local head = target.Character:FindFirstChild("Head")
                if head then
                    Cam.CameraSubject = head
                    Notify("Camera locked to "..target.Name.."'s head", 2)
                else
                    camlockEnabled = false
                    Notify("Target has no head.", 2)
                end
            else
                camlockEnabled = false
                Notify("No valid target.", 2)
            end
        else
            local hum = LP.Character and LP.Character:FindFirstChildOfClass("Humanoid")
            if hum then
                Cam.CameraSubject = hum
            end
            Notify("Camera lock disabled", 2)
        end
    end
end)

-- chọn player gần tâm màn hình nhất
local function selectNearestPlayerToCenter()
    local center = Vector2.new(Cam.ViewportSize.X/2, Cam.ViewportSize.Y/2)
    local best, bestDist = nil, math.huge
    for _,p in ipairs(Players:GetPlayers()) do
        if p ~= LP and p.Character then
            local root = p.Character:FindFirstChild("HumanoidRootPart") or p.Character:FindFirstChild("UpperTorso") or p.Character.PrimaryPart
            if root and root.Position then
                local v = Cam:WorldToViewportPoint(root.Position)
                local screenPos = Vector2.new(v.X, v.Y)
                local d = (screenPos - center).Magnitude
                if d < bestDist then
                    bestDist = d
                    best = p
                end
            end
        end
    end

    if best then
        toggleSelectPlayer(best)
    else
        Notify("No valid target found.", 2)
    end
end

local Sigmaballs = Instance.new("ScreenGui")
Sigmaballs.Name = "Sigmaballs"
Sigmaballs.Parent = game.CoreGui
Sigmaballs.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
Sigmaballs.ResetOnSpawn = false

local ImageButton = Instance.new("ImageButton")
ImageButton.Name = "ImageButton"
ImageButton.Parent = Sigmaballs
ImageButton.Active = true
ImageButton.Draggable = true
ImageButton.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
ImageButton.BackgroundTransparency = 0.5
ImageButton.Size = UDim2.new(0, 90, 0, 90)
ImageButton.Image = "rbxassetid://96086736054343"
ImageButton.Position = UDim2.new(0.5, -25, 0.5, -25)

local Ui2corner = Instance.new("UICorner")
Ui2corner.CornerRadius = UDim.new(0.2, 0)
Ui2corner.Parent = ImageButton

ImageButton.MouseButton1Click:Connect(function()
    selectNearestPlayerToCenter()
end)

local dog = false -- Biến cho WalkSpeed
local howmany = 0 -- Đếm số nút

-- Hàm MakeButton (đã chỉnh sửa để sử dụng Sigmaballs)
local MakeButton = function(ButtonName, Color, callback, keycode)
    howmany = howmany + 1

    local Frame = Instance.new("Frame")
    local TextButton = Instance.new("ImageLabel")
    local TextLabel = Instance.new("TextButton")
    local UITextSizeConstraint = Instance.new("UITextSizeConstraint")

    Frame.Parent = Sigmaballs -- Sử dụng Sigmaballs thay vì tạo ScreenGui mới
    Frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    Frame.BackgroundTransparency = 0.3
    Frame.Position = UDim2.new(0.85, -120, 0.1, (howmany - 1) * 50) -- Điều chỉnh vị trí cho mobile
    Frame.Size = UDim2.new(0, 120, 0, 40)

    local uiStroke = Instance.new("UIStroke")
    uiStroke.Parent = Frame
    uiStroke.Color = Color
    uiStroke.Thickness = 1.2
    uiStroke.Transparency = 0

    TextButton.Parent = Frame
    TextButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    TextButton.BackgroundTransparency = 1
    TextButton.Size = UDim2.new(0, 28, 0, 28)
    TextButton.AnchorPoint = Vector2.new(0, 0.5)
    TextButton.Position = UDim2.new(0.05, 0, 0.5, 0)
    TextButton.Image = "rbxassetid://10734923214"
    TextButton.ImageColor3 = Color

    TextLabel.Parent = Frame
    TextLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    TextLabel.BackgroundTransparency = 1
    TextLabel.Size = UDim2.new(0, 80, 0, 28)
    TextLabel.AnchorPoint = Vector2.new(0.5, 0.5)
    TextLabel.Position = UDim2.new(0.65, 0, 0.5, 0)
    TextLabel.Font = Enum.Font.Arimo
    TextLabel.Text = ButtonName
    TextLabel.TextColor3 = Color
    TextLabel.TextScaled = true
    TextLabel.TextSize = 25
    TextLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    TextLabel.TextStrokeTransparency = 1

    local uiCorner = Instance.new("UICorner", Frame)
    uiCorner.CornerRadius = UDim.new(0, 8)

    local buttonState = false

    TextLabel.Activated:Connect(function() -- Sử dụng Activated thay vì MouseButton1Down để hỗ trợ mobile
        buttonState = not buttonState
        callback(buttonState)
        if buttonState then
            TextButton.Image = "rbxassetid://10735024209"
        else
            TextButton.Image = "rbxassetid://10734923214"
        end
    end)

    if keycode then
        UIS.InputBegan:Connect(function(input, gameProcessed)
            if gameProcessed then return end
            if input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == keycode then
                buttonState = not buttonState
                callback(buttonState)
                if buttonState then
                    TextButton.Image = "rbxassetid://10735024209"
                else
                    TextButton.Image = "rbxassetid://10734923214"
                end
            end
        end)
    end

    local dragStart, startPos
    TextLabel.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragStart = input.Position
            startPos = Frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragStart = nil
                end
            end)
        end
    end)

    TextLabel.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            if dragStart then
                local delta = input.Position - dragStart
                Frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
            end
        end
    end)

    UITextSizeConstraint.Parent = TextLabel
    UITextSizeConstraint.MaxTextSize = 25
end

-- Hàm áp dụng WalkSpeed & JumpPower
local function applyStats(humanoid)
    if not humanoid then return end

    if dog then
        humanoid.WalkSpeed = 150
        humanoid.JumpPower = 80
    else
        humanoid.WalkSpeed = 18
        humanoid.JumpPower = 55
    end

    -- Bảo vệ nếu bị game set lại
    humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
        if dog then
            humanoid.WalkSpeed = 150
        end
    end)
    humanoid:GetPropertyChangedSignal("JumpPower"):Connect(function()
        if dog then
            humanoid.JumpPower = 80
        end
    end)
end

-- Khi ấn nút bật/tắt
MakeButton("WalkSpeed", Color3.fromRGB(255, 255, 255), function(state)
    dog = state

    local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    applyStats(humanoid)

    if dog then
        Notify("WalkSpeed ON: 150, JumpPower: 80", 2)
    else
        Notify("WalkSpeed OFF: 18, JumpPower: 55", 2)
    end
end, Enum.KeyCode.T)

-- Khi respawn, áp dụng lại
LocalPlayer.CharacterAdded:Connect(function(char)
    char:WaitForChild("Humanoid")
    applyStats(char:FindFirstChildOfClass("Humanoid"))
end)

-- Sửa nút Stomp
MakeButton("Stomp", Color3.fromRGB(255, 255, 255), function(state)
    stomptarget = state
    if stomptarget then
        Notify("Stomp: ON", 2)
        -- Bắt đầu vòng lặp kiểm tra các mục tiêu K.O
        local connection
        connection = Run.Heartbeat:Connect(function()
            if not stomptarget then
                connection:Disconnect()
                return
            end

            local char = LP.Character
            if not char then return end
            local hrp = char:FindFirstChild("HumanoidRootPart")
            if not hrp then return end

            -- Duyệt qua các mục tiêu được chọn
            for ply, hl in pairs(selected) do
                if ply and hl and hl.Enabled and ply.Character then
                    local targetChar = ply.Character
                    local targetHum = targetChar:FindFirstChildOfClass("Humanoid")
                    local targetHrp = targetChar:FindFirstChild("HumanoidRootPart")
                    -- Kiểm tra điều kiện bỏ qua: máu bằng 0 VÀ không còn K.O
                    if targetHum and targetHum.Health <= 0 and not isKO(ply) then
                        print(ply.Name, "is dead and not K.O, skipping")
                        continue
                    end
                    if isKO(ply) and targetHrp then
                        local distance = (hrp.Position - targetHrp.Position).Magnitude
                        if distance <= 20 then
                            pcall(function()
                                MainRemote:FireServer("Stomp")
                            end)
                            pcall(function()
                                MainRemote:FireServer("STOMP")
                            end)
                        end
                    end
                end
            end
        end)
    else
        Notify("Stomp: OFF", 2)
        stomptarget = false
    end
end, Enum.KeyCode.K)

-- Biến autoshoot
local tbEnabled = false
local fovRadius = 20

-- Danh sách các bộ phận có thể bắn
local hitParts = {
    "Head", "HumanoidRootPart", "UpperTorso", "LowerTorso", "LeftUpperArm", "LeftLowerArm", "LeftHand",
    "RightUpperArm", "RightLowerArm", "RightHand", "LeftUpperLeg", "LeftLowerLeg", "LeftFoot",
    "RightUpperLeg", "RightLowerLeg", "RightFoot", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg"
}

-- Biến hitpart cho aimlock (mặc định là Head)
local currentHitPart = "Head"

-- Hàm kiểm tra bộ phận hợp lệ
local function validPart(p)
    if not p or not p.Parent or not p.Parent:FindFirstChild("Humanoid") then return false end
    local player = Players:GetPlayerFromCharacter(p.Parent)
    if not player or not selected[player] or not selected[player].Enabled then return false end
    for _, n in ipairs(hitParts) do
        if p.Name:lower() == n:lower() then return true end
    end
    return false
end

-- Hàm tính khoảng cách từ bộ phận đến con trỏ
local function distToCursor(part)
    local v, vis = Cam:WorldToViewportPoint(part.Position)
    if not vis then return math.huge end
    local m = UIS.TouchEnabled and Vector2.new(Cam.ViewportSize.X / 2, Cam.ViewportSize.Y / 2) or UIS:GetMouseLocation()
    return (Vector2.new(v.X, v.Y) - Vector2.new(m.X, m.Y)).Magnitude
end

-- Hàm giả lập click
local function click()
    if UIS.TouchEnabled then
        local touchPos = UIS:GetMouseLocation()
        VIM:SendTouchEvent(0, Enum.UserInputState.Begin, touchPos)
        task.wait()
        VIM:SendTouchEvent(0, Enum.UserInputState.End, touchPos)
    else
        -- Kiểm tra sự tồn tại của mouse1press/mouse1release hoặc mouse1click
        if mouse1press and mouse1release then
            pcall(function()
                mouse1press()
                mouse1release()
            end)
        elseif mouse1click then
            pcall(function()
                mouse1click()
            end)
        else
            -- Fallback: Giả lập click chuột trái nếu các hàm trên không tồn tại
            pcall(function()
                VIM:SendMouseButtonEvent(0, 0, 0, true) -- MouseButton1 down
                task.wait()
                VIM:SendMouseButtonEvent(0, 0, 0, false) -- MouseButton1 up
            end)
        end
    end
end

-- Hàm tìm bộ phận mục tiêu tốt nhất
local function GetBestTargetPart()
    local bestPart, bestDist = nil, fovRadius
    for _, plr in pairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and selected[plr] and selected[plr].Enabled and isAlive(plr) and plr.Character then
            for _, partName in ipairs(hitParts) do
                local part = plr.Character:FindFirstChild(partName)
                if part and part:IsA("BasePart") then
                    local dist = distToCursor(part)
                    if dist < bestDist then
                        bestPart = part
                        bestDist = dist
                    end
                end
            end
        end
    end
    return bestPart
end

-- ===== CHAT COMMANDS =====
local antiStompActive = false
local flashbackActive = false
local lastPosition = nil

-- Logic AntiStomp + Flashback
local function startAntiStomp()
    local function checkAndKill(chr)
        local hum = chr:WaitForChild("Humanoid", 5)
        local bodyEffects = chr:WaitForChild("BodyEffects", 5)
        if not hum or not bodyEffects then return end
        local koValue = bodyEffects:WaitForChild("K.O", 5)
        if not koValue then return end

        local connection
        connection = Run.Heartbeat:Connect(function()
            if not antiStompActive then
                connection:Disconnect()
                return
            end
            if koValue.Value == true and hum.Health > 0 then
                if flashbackActive then
                    lastPosition = chr:GetPrimaryPartCFrame()
                end
                hum.Health = 0
            end
        end)
    end

    if LocalPlayer.Character then
        checkAndKill(LocalPlayer.Character)
    end
    LocalPlayer.CharacterAdded:Connect(function(newChar)
        if antiStompActive then
            checkAndKill(newChar)
            if flashbackActive and lastPosition then
                local root = newChar:WaitForChild("HumanoidRootPart", 5)
                if root then
                    while (root.Position - lastPosition.Position).Magnitude > 5 do
                        root.CFrame = lastPosition
                        task.wait()
                    end
                end
                lastPosition = nil
            end
        end
    end)
end

-- Thêm nút MakeButton cho autoshoot
MakeButton("AutoShoot", Color3.fromRGB(255, 255, 255), function(state)
    tbEnabled = state
    if tbEnabled then
        Notify("AutoShoot: ON", 2)
    else
        Notify("AutoShoot: OFF", 2)
    end
end, Enum.KeyCode.Z) -- Phím Z để bật/tắt

-- Vòng lặp autoshoot
Run.RenderStepped:Connect(function()
    if tbEnabled then
        local part = GetBestTargetPart()
        if part then
            task.spawn(function()
                local cap = part
                task.wait(0)
                if tbEnabled and distToCursor(cap) <= fovRadius then
                    local origin = Cam.CFrame.Position
                    local direction = (cap.Position - origin)
                    local rayParams = RaycastParams.new()
                    rayParams.FilterType = Enum.RaycastFilterType.Blacklist
                    rayParams.FilterDescendantsInstances = {LocalPlayer.Character or {}}

                    local result = workspace:Raycast(origin, direction, rayParams)

                    -- Chỉ bắn nếu raycast trúng chính xác target (không bị che)
                    if not result or result.Instance:IsDescendantOf(cap.Parent) then
                        if UIS.TouchEnabled and not UIS.MouseEnabled then
                            -- Mobile
                            local char = LocalPlayer.Character
                            local fired = false
                            if char then
                                for _, tool in ipairs(char:GetChildren()) do
                                    if tool:IsA("Tool") then
                                        pcall(function() tool:Activate() end)
                                        fired = true
                                        break
                                    end
                                end
                            end
                            if not fired then
                                click() -- Fallback tap
                            end
                        else
                            -- PC
                            click()
                        end
                    end
                end
            end)
        end
    end
end)

local key = Enum.KeyCode.Y

UIS.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if input.KeyCode == key then
        local char = LP.Character
        if char then
            local hum = char:FindFirstChildOfClass("Humanoid")
            if hum then
                hum.Health = 0
                Notify("Died", 2)
            end
        end
    end
end)

Run.Heartbeat:Connect(function()
    if AutoPingSets then
        -- Lấy giá trị ping
        local pingvalue, ping
        local success = pcall(function()
            pingvalue = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
            local split = string.split(pingvalue, "(")
            ping = tonumber(split[1])
        end)
        if not success or not ping then
            ping = 60 -- Giá trị mặc định nếu lỗi
        end

        -- Gán predictionTime dựa trên ping (sử dụng giá trị từ closePredictions)
        if ping > 450 then
            predictionTime = 0.1850
        elseif ping > 400 then
            predictionTime = 0.1800
        elseif ping > 350 then
            predictionTime = 0.1750
        elseif ping > 300 then
            predictionTime = 0.1700
        elseif ping > 280 then
            predictionTime = 0.165771
        elseif ping > 270 then
            predictionTime = 0.16780
        elseif ping > 260 then
            predictionTime = 0.195566
        elseif ping > 250 then
            predictionTime = 0.175566
        elseif ping > 240 then
            predictionTime = 0.1651
        elseif ping > 230 then
            predictionTime = 0.16780
        elseif ping > 220 then
            predictionTime = 0.15692
        elseif ping > 210 then
            predictionTime = 0.165566
        elseif ping > 200 then
            predictionTime = 0.165566
        elseif ping > 190 then
            predictionTime = 0.16942
        elseif ping > 180 then
            predictionTime = 0.166547
        elseif ping > 170 then
            predictionTime = 0.19284
        elseif ping > 160 then
            predictionTime = 0.1923111
        elseif ping > 150 then
            predictionTime = 0.16
        elseif ping > 140 then
            predictionTime = 0.15
        elseif ping > 130 then
            predictionTime = 0.153
        elseif ping > 120 then
            predictionTime = 0.151
        elseif ping > 110 then
            predictionTime = 0.149
        elseif ping > 100 then
            predictionTime = 0.146
        elseif ping > 90 then
            predictionTime = 0.130340
        elseif ping > 80 then
            predictionTime = 0.136
        elseif ping > 70 then
            predictionTime = 0.134
        elseif ping > 60 then
            predictionTime = 0.131
        elseif ping > 50 then
            predictionTime = 0.12685
        elseif ping > 40 then
            predictionTime = 0.1225
        elseif ping > 30 then
            predictionTime = 0.1256
        elseif ping > 25 then
            predictionTime = 0.11
        elseif ping > 23 then
            predictionTime = 0.11888
        elseif ping > 20 then
            predictionTime = 0.121116
        else
            predictionTime = 0.12588
        end
    end
end)

-- ====== AIMLOCK LOOP ======
Run.RenderStepped:Connect(function(dt)

    local char = LocalPlayer.Character
    if not char then return end
    
    local tool = char:FindFirstChildWhichIsA("Tool")
    if not tool then return end

    local ammo = tool:FindFirstChild("Ammo")
    if ammo and ammo.Value <= 0 then
        -- Reload (Normal)
        MainRemote:FireServer("Reload", tool)
        task.wait(3.7)
    end

    if not aimlockEnabled then return end

    -- choose nearest selected & alive & visible target (head only)
    local target, dist = getNearestSelectedAliveVisible()
    if not target then
        return
    end

    -- get head and predict
    local targetPart = target.Character and target.Character:FindFirstChild(currentHitPart)
    if not targetPart then return end

    pcall(function()
        targetPart.Velocity = Vector3.new(targetPart.Velocity.X, 0, targetPart.Velocity.Z)
        targetPart.AssemblyLinearVelocity = Vector3.new(targetPart.AssemblyLinearVelocity.X, 0, targetPart.AssemblyLinearVelocity.Z)
    end)

    if target.Character:FindFirstChild("HumanoidRootPart") and
        target.Character.HumanoidRootPart.Velocity.Magnitude > targetPart.Velocity.Magnitude then
        pcall(function()
            targetPart.Velocity = Vector3.new(0, 0, 0)
            targetPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
        end)
    end
    
    local vel = targetPart.Velocity or Vector3.new(0,0,0)
    local predicted = targetPart.Position + vel * predictionTime

    -- desired camera CFrame looking from current cam position to predicted point
    local camPos = Cam.CFrame.Position
    local desiredCFrame = CFrame.new(camPos, predicted)

    -- apply smoothing (alpha = aimSmoothing)
    local alpha = math.clamp(aimSmoothing, 0, 1)
    local newCFrame = Cam.CFrame:Lerp(desiredCFrame, alpha)
    pcall(function() Cam.CFrame = newCFrame end)
end)

Run.Heartbeat:Connect(function()
    local character = LocalPlayer.Character
    if character then
        local bodyEffects = character:FindFirstChild("BodyEffects")
        if bodyEffects then
            local movement = bodyEffects:FindFirstChild("Movement")
            if movement then
                local noJumping = movement:FindFirstChild("NoJumping")
                if noJumping then noJumping:Destroy() end
                
                local reduceWalk = movement:FindFirstChild("ReduceWalk")
                if reduceWalk then reduceWalk:Destroy() end
                
                local noWalkSpeed = movement:FindFirstChild("NoWalkSpeed")
                if noWalkSpeed then noWalkSpeed:Destroy() end
            end
            
            local reload = bodyEffects:FindFirstChild("Reload")
            if reload and reload.Value then
                reload.Value = false
            end
        end
    end
end)

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local TeleportService = game:GetService("TeleportService")
local TextChatService = game:GetService("TextChatService")

-- danh sách lệnh hợp lệ
local commands = {
    "walkspeed","jumppower","aimlock","triggerbot","autostomp",
    "autoreload","antistomp","flashback","prediction","fov",
    "reset","rejoin", "desync", "demode", "autopingsets", "hitpart"
}

-- ⚡ Hàm tính Levenshtein distance (so sánh độ giống)
local function levenshtein(s, t)
    local m, n = #s, #t
    if m == 0 then return n end
    if n == 0 then return m end
    local d = {}
    for i = 0, m do d[i] = {[0] = i} end
    for j = 0, n do d[0][j] = j end
    for i = 1, m do
        for j = 1, n do
            local cost = (s:sub(i,i) == t:sub(j,j)) and 0 or 1
            d[i][j] = math.min(
                d[i-1][j] + 1,
                d[i][j-1] + 1,
                d[i-1][j-1] + cost
            )
        end
    end
    return d[m][n]
end

-- ⚡ tìm lệnh gần đúng
local function findClosestCommand(input)
    input = string.lower(input)
    local best, bestDist
    for _, cmd in ipairs(commands) do
        if cmd:find(input, 1, true) == 1 then
            return cmd -- nếu trùng prefix thì ưu tiên
        end
        local dist = levenshtein(input, cmd)
        if not bestDist or dist < bestDist then
            best, bestDist = cmd, dist
        end
    end
    return best
end

-- ⚡ tìm hitpart gần đúng
local function findClosestHitPart(input)
    input = string.lower(input)
    local best, bestDist
    for _, part in ipairs(hitParts) do
        if part:lower():find(input, 1, true) == 1 then
            return part -- nếu trùng prefix thì ưu tiên
        end
        local dist = levenshtein(input, part:lower())
        if not bestDist or dist < bestDist then
            best, bestDist = part, dist
        end
    end
    return best
end

-- ⚡ Handler chính
local function handleCommandText(raw)
    if not raw then return end
    local msg = tostring(raw):match("^%s*(.-)%s*$")
    if msg == "" or msg:sub(1,1) ~= "." then return end

    local body = msg:sub(2)
    if body == "" then return end

    local args = {}
    for w in body:gmatch("%S+") do table.insert(args, w) end
    local cmd = args[1] or ""
    local val = tonumber(args[2])

    local mainCmd = findClosestCommand(cmd)
    if not mainCmd then
        Notify("Unknown command: "..cmd, 2)
        return
    end

    -- === Các lệnh xử lý ===
    if mainCmd == "walkspeed" then
        local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if val and hum then
            hum.WalkSpeed = val
            Notify("WalkSpeed set to "..val, 2)
        else
            dog = not dog
            Notify("WalkSpeed toggle: "..tostring(dog), 2)
            if hum then applyStats(hum) end
        end

    elseif mainCmd == "jumppower" then
        local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if val and hum then
            hum.JumpPower = val
            Notify("JumpPower set to "..val, 2)
        end

    elseif mainCmd == "aimlock" then
        aimlockEnabled = not aimlockEnabled
        selected = {}
        for ply, hl in pairs(selected) do
            fullyRemoveHighlight(ply) -- xóa highlight
            removeTracer(ply)         -- xóa tracer
        end
        pcall(function()
            if LP.Character then
                local hum = LP.Character:FindFirstChildOfClass("Humanoid")
                if hum then Cam.CameraSubject = hum end
            end
        end)
        Notify("Aimlock: "..tostring(aimlockEnabled), 2)

    elseif mainCmd == "triggerbot" then
        tbEnabled = not tbEnabled
        Notify("TriggerBot: "..tostring(tbEnabled), 2)

    elseif mainCmd == "autostomp" then
        stomptarget = not stomptarget
        Notify("AutoStomp: "..tostring(stomptarget), 2)

    elseif mainCmd == "autoreload" then
        autoReload = not autoReload
        Notify("AutoReload: "..tostring(autoReload), 2)

    elseif mainCmd == "autopingsets" then
        AutoPingSets = not AutoPingSets
        Notify("AutoPingSets: "..tostring(AutoPingSets), 2)

    elseif mainCmd == "antistomp" then
        antiStompActive = not antiStompActive
        Notify("AntiStomp: "..tostring(antiStompActive), 2)
        if antiStompActive then startAntiStomp() end

    elseif mainCmd == "flashback" then
        flashbackActive = not flashbackActive
        Notify("Flashback: "..tostring(flashbackActive), 2)

    elseif mainCmd == "prediction" then
        if val then
            predictionTime = val
            Notify("Prediction set to "..val, 2)
        else
            Notify("Usage: .prediction <number>", 2)
        end

    elseif mainCmd == "fov" then
        if val then
            workspace.CurrentCamera.FieldOfView = val
            Notify("FOV set to "..val, 2)
        else
            Notify("Usage: .fov <number>", 2)
        end

    elseif mainCmd == "reset" then
        local hum = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if hum then
            hum.Health = 0
            Notify("Character reset!", 2)
        end

    elseif mainCmd == "rejoin" then
        Notify("Rejoining...", 2)
        TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, LocalPlayer)

    elseif mainCmd == "desync" then
        toggleDesync(not desync.enabled)
        Notify("Desync: " .. (desync.enabled and "ON" or "OFF"), 2)

    elseif mainCmd == "demode" then
        if args[2] then
            setDesyncMode(args[2])
            Notify("Desync mode set to " .. args[2], 2)
        else
            Notify("Usage: .demode <mode>", 2)
        end

    elseif mainCmd == "hitpart" then
        if args[2] then
            local inputPart = args[2]
            local bestPart = findClosestHitPart(inputPart)
            if bestPart then
                currentHitPart = bestPart
                Notify("Hitpart set to " .. bestPart, 2)
            else
                Notify("No matching hitpart found.", 2)
            end
        else
            Notify("Usage: .hitpart <part>", 2)
        end
    end
end

-- ⚡ Gắn vào chat
if TextChatService and TextChatService.SendingMessage then
    TextChatService.SendingMessage:Connect(function(message)
        pcall(function()
            handleCommandText(message.Text)
        end)
    end)
else
    LocalPlayer.Chatted:Connect(function(msg)
        pcall(function()
            handleCommandText(msg)
        end)
    end)
end

local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local LocalPlayer = game:GetService("Players").LocalPlayer

desync_setback = Instance.new("Part")
desync_setback.Name = "Desync Setback"
desync_setback.Parent = workspace
desync_setback.Size = Vector3.new(2, 2, 1)
desync_setback.CanCollide = false
desync_setback.Anchored = true
desync_setback.Transparency = 1

desync = {
    enabled = false,
    mode = "Destroy Cheaters",
    teleportCFrame = CFrame.new(0, 0, 0),
    old_position = nil,
    voidSpamActive = false,
    toggleEnabled = false
}

function resetCamera()
    if LocalPlayer.Character then
        local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
        if humanoid then
            workspace.CurrentCamera.CameraSubject = humanoid
        end
    end
end

function toggleDesync(state)
    desync.enabled = state
    if desync.enabled then
        workspace.CurrentCamera.CameraSubject = desync_setback
    else
        resetCamera()
    end
end

function setDesyncMode(mode)
    desync.mode = mode
end

RunService.Heartbeat:Connect(function()
    if desync.enabled and LocalPlayer.Character then
        local rootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            desync.old_position = rootPart.CFrame

            local teleportPosition = Vector3.new(0, 0, 0)
            local teleportRotation = CFrame.new()

            if desync.mode == "Destroy Cheaters" then
                teleportPosition = Vector3.new(11223344556677889900, 1, 1)

            elseif desync.mode == "Underground" then
                teleportPosition = rootPart.Position - Vector3.new(0, 12, 0)

            elseif desync.mode == "Void Spam" then
                teleportPosition = math.random(1, 2) == 1 and desync.old_position.Position or Vector3.new(
                    math.random(10000, 50000),
                    math.random(10000, 50000),
                    math.random(10000, 50000)
                )

            elseif desync.mode == "Void" then
                teleportPosition = Vector3.new(
                    rootPart.Position.X + math.random(-444444, 444444),
                    rootPart.Position.Y + math.random(-444444, 444444),
                    rootPart.Position.Z + math.random(-44444, 44444)
                )

            elseif desync.mode == "Player" then
                local target = getNearestSelectedAliveVisible()
                if not target then
                    desync.enabled = false
                    Notify("No valid target for Player mode, desync disabled.", 2)
                    return
                end
                local targetRoot = target.Character:FindFirstChild("HumanoidRootPart")
                if targetRoot then
                    local offset = Vector3.new(math.random(-20, 20), math.random(-10, 10), math.random(-20, 20))
                    teleportPosition = targetRoot.Position + offset
                    teleportRotation = CFrame.Angles(
                        math.rad(math.random(0, 360)),
                        math.rad(math.random(0, 360)),
                        math.rad(math.random(0, 360))
                    )
                else
                    desync.enabled = false
                    Notify("Target has no HumanoidRootPart, desync disabled.", 2)
                    return
                end
            end

            desync.teleportCFrame = CFrame.new(teleportPosition) * teleportRotation

            if desync.mode ~= "Rotation" then
                rootPart.CFrame = desync.teleportCFrame
                workspace.CurrentCamera.CameraSubject = desync_setback

                RunService.RenderStepped:Wait()

                desync_setback.CFrame = desync.old_position * CFrame.new(0, rootPart.Size.Y / 2 + 0.5, 0)
                rootPart.CFrame = desync.old_position
            end
        end
    end
end)

-- Thêm nút Desync
MakeButton("Desync", Color3.fromRGB(255, 255, 255), function(state)
    toggleDesync(state)
    Notify("Desync: " .. (state and "ON" or "OFF"), 2)
end, Enum.KeyCode.V)

Notify("Aimlock | anhchanhm52", 2)
