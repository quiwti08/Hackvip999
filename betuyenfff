
local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false -- Forces AddToggle to AddCheckbox
Library.ShowToggleFrameInKeybinds = true -- Make toggle keybinds work inside the keybinds UI (aka adds a toggle to the UI). Good for mobile users (Default value = true)

local Window = Library:CreateWindow({
	Title = "nigga.lol",
	Footer = "nigga.lol | vhuy-anhchangm52",
	Icon = 5013109572,
	NotifySide = "Right",
	ShowCustomCursor = true,
	Resizable = true, -- Make the window resizable as per example
})

local Tabs = {
	Main = Window:AddTab("Aimbot", "user"),
	["UI Settings"] = Window:AddTab("UI Settings", "settings"),
}

-- Original script globals and functions remain unchanged
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local AIM_RADIUS = 300
local AIM_FOV = 100
local AIM_SMOOTHNESS = 0.9
local TriggerBotEnabled = true
local fovRadius = 15
local movementEnabled = false
local jumpPower = 50
local walkSpeed = 16
local teamCheck = false
local HitboxEnabled = false
local HitboxTransparency = 0.9
local HitboxSize = 15

-- Initialize Notifications tables
local Notifications = {}
local TargetNotifications = {}

-- Global settings
getgenv().YeuTuyen = {
    Status = true,
    Hitpart = "Head",
    SelectedTargets = {},
    ESPEnabled = false,
    Mode = "Aimbot",
    CheckIfJumped = true,
    CheckIfJumpedAimPart = "HumanoidRootPart",
    AutoPingSets = true,
    UseShake = true,
    ShakePower = 1,
    PredictMovement = false,
    PredictionVelocity = 0.17221418,
    UnderGround = false,
    DetectDesync = true,
    Detection = 75,
}

-- FOV Circle
local fovCircle = Drawing.new("Circle")
fovCircle.Visible = true
fovCircle.Radius = AIM_FOV
fovCircle.Thickness = 2
fovCircle.NumSides = 100
fovCircle.Color = Color3.fromRGB(255, 255, 255)
fovCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

-- Cycle FOV circle color
local colorValue = 255
local increasing = false
task.spawn(function()
    while true do
        task.wait(0)
        if increasing then
            colorValue = colorValue + 1
            if colorValue >= 255 then
                increasing = false
            end
        else
            colorValue = colorValue - 1
            if colorValue <= 0 then
                increasing = true
            end
        end
        fovCircle.Color = Color3.fromRGB(colorValue, colorValue, colorValue)
    end
end)

-- Notification function (adapted to use Library:Notify)
local function sendNotification(title, text, duration)
    Library:Notify({
        Title = title or "Nigga.lol",
        Description = text or "Notification",
        Time = duration or 3,
    })
end

-- Target notification function (adapted, but kept similar; uses Library:Notify for simplicity)
local function sendTargetNotification(plr)
    local status = plr.Character and plr.Character:FindFirstChildOfClass("Humanoid") and plr.Character.Humanoid.Health > 0 and "Alive" or "Dead"
    local health = plr.Character and plr.Character:FindFirstChildOfClass("Humanoid") and plr.Character.Humanoid.Health or 0
    Library:Notify({
        Title = "Target",
        Description = plr.DisplayName .. " (@" .. plr.Name .. ")\nAge: " .. plr.AccountAge .. " days\nStatus: " .. status .. " | Health: " .. math.floor(health),
        Time = 3,
    })
end

-- Remove ESP
local function removeESP(plr)
    if plr.Character then
        local char = plr.Character
        local hl = char:FindFirstChild("ESPHighlight")
        if hl then hl:Destroy() end
        local gui = char:FindFirstChild("NameESP")
        if gui then gui:Destroy() end
    end
end

-- Update ESP with tracer support
local tracerEnabled = false
local tracers = {}
local rainbowMode = true
local function updateESP(plr)
    if plr == LocalPlayer then return end
    if not plr.Character or not plr.Character:FindFirstChild("Head") then return end
    local char = plr.Character
    local head = char.Head
    
    -- Highlight
    local hl = char:FindFirstChild("ESPHighlight")
    if not hl then
        hl = Instance.new("Highlight")
        hl.Name = "ESPHighlight"
        hl.Adornee = char
        hl.FillTransparency = 0.4
        hl.OutlineTransparency = 0
        hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        hl.Parent = char
    end
    local isSelected = getgenv().YeuTuyen.SelectedTargets[plr.Name]
    hl.FillColor = rainbowMode and getRainbowColor() or (isSelected and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 255, 255))
    hl.OutlineColor = rainbowMode and getRainbowColor() or Color3.fromRGB(255, 255, 255)

    -- Name Billboard
    local gui = char:FindFirstChild("NameESP")
    if not gui then
        gui = Instance.new("BillboardGui")
        gui.Name = "NameESP"
        gui.Adornee = head
        gui.Size = UDim2.new(0, 200, 0, 30)
        gui.StudsOffset = Vector3.new(0, 2.5, 0)
        gui.AlwaysOnTop = true
        gui.Parent = char
        local nameLabel = Instance.new("TextLabel")
        nameLabel.Name = "NameLabel"
        nameLabel.Size = UDim2.new(1, 0, 1, 0)
        nameLabel.BackgroundTransparency = 1
        nameLabel.TextStrokeTransparency = 0.5
        nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
        nameLabel.Font = Enum.Font.SourceSansBold
        nameLabel.TextScaled = true
        nameLabel.Parent = gui
    end
    local nameLabel = gui:FindFirstChild("NameLabel")
    if nameLabel then
        nameLabel.Text = plr.DisplayName .. " (" .. plr.Name .. ")"
        nameLabel.TextColor3 = rainbowMode and getRainbowColor() or (isSelected and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 255, 255))
    end

    -- Tracer
    if tracerEnabled then
        local tracer = tracers[plr.Name]
        if not tracer then
            tracer = Drawing.new("Line")
            tracer.Thickness = 2
            tracer.Transparency = 1
            tracers[plr.Name] = tracer
        end
        local screenPos, onScreen = Camera:WorldToViewportPoint(head.Position)
        if onScreen then
            tracer.Visible = true
            tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
            tracer.To = Vector2.new(screenPos.X, screenPos.Y)
            tracer.Color = rainbowMode and getRainbowColor() or (isSelected and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 255, 255))
        else
            tracer.Visible = false
        end
    else
        if tracers[plr.Name] then
            tracers[plr.Name]:Remove()
            tracers[plr.Name] = nil
        end
    end
end

-- Rainbow update
local rainbowHue = 0
RunService.RenderStepped:Connect(function()
    rainbowHue = (rainbowHue + 0.01) % 1
end)

local function getRainbowColor()
    return Color3.fromHSV(rainbowHue, 1, 1)
end

-- Hit effect (2 giÃ¢y rainbow outline)
local function RainbowHitEffect(char)
    if not char then return end
    local hl = char:FindFirstChild("ESPHighlight")
    if not hl then return end

    local effect = Instance.new("Highlight")
    effect.Adornee = char
    effect.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    effect.FillTransparency = 1
    effect.OutlineTransparency = 0
    effect.Parent = char

    local t = 0
    local conn
    conn = RunService.RenderStepped:Connect(function(dt)
        if t > 2 then
            effect:Destroy()
            conn:Disconnect()
        else
            t += dt
            effect.OutlineColor = getRainbowColor()
        end
    end)
end

RunService.RenderStepped:Connect(function()
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer then
            local char = plr.Character
            local head = char and char:FindFirstChild("Head")
            local hum = char and char:FindFirstChildOfClass("Humanoid")

            if char and head and hum and hum.Health > 0 then
                -- ESP
                if getgenv().YeuTuyen.ESPEnabled then
                    local hl = char:FindFirstChild("ESPHighlight") or Instance.new("Highlight")
                    hl.Name = "ESPHighlight"
                    hl.Adornee = char
                    hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                    hl.FillTransparency = 0.4
                    hl.OutlineTransparency = 0
                    hl.Parent = char

                    local gui = char:FindFirstChild("NameESP") or Instance.new("BillboardGui")
                    if not char:FindFirstChild("NameESP") then
                        gui.Name = "NameESP"
                        gui.Adornee = head
                        gui.Size = UDim2.new(0, 200, 0, 30)
                        gui.StudsOffset = Vector3.new(0, 2.5, 0)
                        gui.AlwaysOnTop = true
                        gui.Parent = char
                        local nameLabel = Instance.new("TextLabel")
                        nameLabel.Name = "NameLabel"
                        nameLabel.Size = UDim2.new(1, 0, 1, 0)
                        nameLabel.BackgroundTransparency = 1
                        nameLabel.TextStrokeTransparency = 0.5
                        nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
                        nameLabel.Font = Enum.Font.SourceSansBold
                        nameLabel.TextScaled = true
                        nameLabel.Parent = gui
                    end
                    local nameLabel = gui:FindFirstChild("NameLabel")

                    -- Kiá»m tra target
                    local isTarget = getgenv().YeuTuyen.SelectedTargets[plr.Name]
                    local color = Color3.fromRGB(255, 255, 255) -- máº·c Äá»nh tráº¯ng
                    if isTarget then
                        color = rainbowMode and getRainbowColor() or Color3.fromRGB(0, 255, 0)
                    end

                    hl.FillColor = color
                    hl.OutlineColor = color
                    if nameLabel then
                        nameLabel.Text = plr.DisplayName .. " (" .. plr.Name .. ")"
                        nameLabel.TextColor3 = color
                    end
                else
                    local hl = char:FindFirstChild("ESPHighlight")
                    if hl then hl:Destroy() end
                    local gui = char:FindFirstChild("NameESP")
                    if gui then gui:Destroy() end
                end

                -- Tracer
                if tracerEnabled then
                    local tracer = tracers[plr.Name] or Drawing.new("Line")
                    tracers[plr.Name] = tracer
                    tracer.Thickness = 2

                    local isTarget = getgenv().YeuTuyen.SelectedTargets[plr.Name]
                    if not isTarget then
                        -- KhÃ´ng cÃ²n target => xoÃ¡ tracer
                        if tracers[plr.Name] then
                            tracers[plr.Name]:Remove()
                            tracers[plr.Name] = nil
                        end
                    else
                        local screenPos, onScreen = Camera:WorldToViewportPoint(head.Position)
                        if onScreen then
                            tracer.Visible = true
                            tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
                            tracer.To = Vector2.new(screenPos.X, screenPos.Y)
                            tracer.Color = rainbowMode and getRainbowColor() or Color3.fromRGB(0, 255, 0)
                        else
                            tracer.Visible = false
                        end
                    end
                else
                    if tracers[plr.Name] then
                        tracers[plr.Name]:Remove()
                        tracers[plr.Name] = nil
                    end
                end
            else
                -- XoÃ¡ ESP + Tracer khi cháº¿t
                if tracers[plr.Name] then
                    tracers[plr.Name]:Remove()
                    tracers[plr.Name] = nil
                end
                local hl = char and char:FindFirstChild("ESPHighlight")
                if hl then hl:Destroy() end
                local gui = char and char:FindFirstChild("NameESP")
                if gui then gui:Destroy() end
            end
        end
    end

    -- Circle update
    if fovCircle.Visible and rainbowMode then
        fovCircle.Color = getRainbowColor()
    elseif fovCircle.Visible then
        fovCircle.Color = Color3.fromRGB(255, 255, 255)
    end
end)

local function checkTeam(player)
    if teamCheck and player.Team == LocalPlayer.Team then
        return true  -- cÃ¹ng team => bá» qua
    end
    return false   -- khÃ¡c team => há»£p lá»
end

-- GetBestTarget for Aimlock
local function GetBestTarget()
    if not getgenv().YeuTuyen or not getgenv().YeuTuyen.SelectedTargets then return end
    local bestTarget, bestPart, bestHumanoid = nil, nil, nil
    local closestDist = math.huge
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and getgenv().YeuTuyen.SelectedTargets[player.Name] and not checkTeam(player) then
            local char = player.Character
            local humanoid = char and char:FindFirstChildOfClass("Humanoid")
            local part = char and char:FindFirstChild(getgenv().YeuTuyen.Hitpart)
            if humanoid and humanoid.Health > 0 and part and not humanoid.PlatformStand then
                local bodyEffects = char:FindFirstChild("BodyEffects")
                local isKOd = bodyEffects and bodyEffects:FindFirstChild("K.O") and bodyEffects["K.O"].Value
                local isGrabbed = char:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
                if not isKOd and not isGrabbed then
                    local myRoot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                    if myRoot then
                        local dist = (myRoot.Position - part.Position).Magnitude
                        if dist < closestDist then
                            local origin = Camera.CFrame.Position
                            local direction = (part.Position - origin).Unit * 500
                            local params = RaycastParams.new()
                            params.FilterType = Enum.RaycastFilterType.Blacklist
                            params.FilterDescendantsInstances = {LocalPlayer.Character}
                            params.IgnoreWater = true
                            local result = Workspace:Raycast(origin, direction, params)
                            if result and result.Instance:IsDescendantOf(char) then
                                bestTarget = player
                                bestPart = part
                                bestHumanoid = humanoid
                                closestDist = dist
                            end
                        end
                    end
                end
            end
        end
    end
    return bestTarget, bestPart, bestHumanoid
end

-- GetAimbotTarget for Aimbot
local function GetAimbotTarget()
    local bestTarget, bestPart, bestHumanoid = nil, nil, nil
    local closestScreenDist = AIM_FOV
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            local char = player.Character
            local humanoid = char and char:FindFirstChildOfClass("Humanoid")
            local part = char and char:FindFirstChild(getgenv().YeuTuyen.Hitpart)
            if humanoid and humanoid.Health > 0 and part and not humanoid.PlatformStand and not checkTeam(player) then
                local bodyEffects = char:FindFirstChild("BodyEffects")
                local isKOd = bodyEffects and bodyEffects:FindFirstChild("K.O") and bodyEffects["K.O"].Value
                local isGrabbed = char:FindFirstChild("GRABBING_CONSTRAINT") ~= nil
                if not isKOd and not isGrabbed then
                    local screenPos, onScreen = Camera:WorldToViewportPoint(part.Position)
                    if onScreen then
                        local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
                        local screenDist = (Vector2.new(screenPos.X, screenPos.Y) - screenCenter).Magnitude
                        if screenDist <= AIM_FOV and screenDist < closestScreenDist then
                            local origin = Camera.CFrame.Position
                            local direction = (part.Position - origin).Unit * 500
                            local params = RaycastParams.new()
                            params.FilterType = Enum.RaycastFilterType.Blacklist
                            params.FilterDescendantsInstances = {LocalPlayer.Character}
                            params.IgnoreWater = true
                            local result = Workspace:Raycast(origin, direction, params)
                            if result and result.Instance:IsDescendantOf(char) then
                                bestTarget = player
                                bestPart = part
                                bestHumanoid = humanoid
                                closestScreenDist = screenDist
                            end
                        end
                    end
                end
            end
        end
    end
    return bestTarget, bestPart, bestHumanoid
end

-- Select closest to mouse
local function SelectClosestToMouse()
    local closestPlayer = nil
    local closestScreenDist = AIM_RADIUS
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local head = player.Character.Head
            local screenPos, onScreen = Camera:WorldToViewportPoint(head.Position)
            if onScreen then
                local mousePos = Vector2.new(Mouse.X, Mouse.Y)
                local dist = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
                if dist < closestScreenDist then
                    closestScreenDist = dist
                    closestPlayer = player
                end
            end
        end
    end
    if closestPlayer then
        local name = closestPlayer.Name
        if getgenv().YeuTuyen.SelectedTargets[name] then
            getgenv().YeuTuyen.SelectedTargets[name] = nil
            sendNotification("Target", "Deselected: " .. name, 2)
            updateESP(closestPlayer)
        else
            getgenv().YeuTuyen.SelectedTargets[name] = true
            sendNotification("Target", "Selected: " .. name, 2)
            sendTargetNotification(closestPlayer)
            updateESP(closestPlayer)
        end
    else
        sendNotification("Target", "No target found near mouse!", 2)
    end
end

local function isAlive(plr)
    if not plr or not plr.Character then return false end
    local hum = plr.Character:FindFirstChildOfClass("Humanoid")
    if not hum or hum.Health <= 0 then return false end
    local be = plr.Character:FindFirstChild("BodyEffects")
    if be then
        local ko = be:FindFirstChild("K.O")
        local grabbed = be:FindFirstChild("GRABBING_CONSTRAINT")
        if (ko and ko.Value) or (grabbed and grabbed.Value) then return false end
    end
    return true
end

local hitParts = {
    "Head", "HumanoidRootPart", "UpperTorso", "LowerTorso", "LeftUpperArm", "LeftLowerArm", "LeftHand",
    "RightUpperArm", "RightLowerArm", "RightHand", "LeftUpperLeg", "LeftLowerLeg", "LeftFoot",
    "RightUpperLeg", "RightLowerLeg", "RightFoot", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg"
}

local function validPart(p)
    if not p or not p.Parent or not p.Parent:FindFirstChild("Humanoid") then return false end
    local player = Players:GetPlayerFromCharacter(p.Parent)
    if not player or not getgenv().YeuTuyen.SelectedTargets[player.Name] then return false end
    for _, n in ipairs(hitParts) do
        if p.Name:lower() == n:lower() then return true end
    end
    return false
end

if not mouse1press then
    function mouse1press()
        local pos = game:GetService("UserInputService"):GetMouseLocation()
        VirtualInputManager:SendMouseButtonEvent(pos.X, pos.Y, 0, true, game, 0)
    end
end

if not mouse1release then
    function mouse1release()
        local pos = game:GetService("UserInputService"):GetMouseLocation()
        VirtualInputManager:SendMouseButtonEvent(pos.X, pos.Y, 0, false, game, 0)
    end
end

local function click()
    if UserInputService.TouchEnabled then
        local touchPos = UserInputService:GetMouseLocation()
        VirtualInputManager:SendTouchEvent(0, Enum.UserInputState.Begin, touchPos)
        task.wait()
        VirtualInputManager:SendTouchEvent(0, Enum.UserInputState.End, touchPos)
    else
        if mouse1press then
            mouse1press()
            mouse1release()
        elseif mouse1click then
            mouse1click()
        end
    end
end

local function distToCursor(part)
    local v, vis = Camera:WorldToViewportPoint(part.Position)
    if not vis then return math.huge end
    local m = UserInputService.TouchEnabled and Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2) or UserInputService:GetMouseLocation()
    return (Vector2.new(v.X, v.Y) - Vector2.new(m.X, m.Y)).Magnitude
end

local function GetBestTargetPart()
    local bestPart, bestDist = nil, fovRadius
    for name, _ in pairs(getgenv().YeuTuyen.SelectedTargets) do
        local plr = Players:FindFirstChild(name)
        if plr and plr ~= LocalPlayer and isAlive(plr) and plr.Character then 
            for _, partName in ipairs(hitParts) do
                local part = plr.Character:FindFirstChild(partName)
                if part and part:IsA("BasePart") then
                    local dist = distToCursor(part)
                    if dist < bestDist then
                        bestPart = part
                        bestDist = dist
                    end
                end
            end
        end
    end
    return bestPart
end

-- HÃ m báº¯n
local function shoot()
    local playerGui = LocalPlayer:FindFirstChild("PlayerGui")
    
    if playerGui then
        -- Kiá»m tra MobileControls vÃ  Fire button
        local mobileControls = playerGui:FindFirstChild("MobileControls")
        if mobileControls then
            local touchControlFrame = mobileControls:FindFirstChild("TouchControlFrame")
            if touchControlFrame then
                local frame = touchControlFrame:FindFirstChild("Frame")
                if frame then
                    local fireButton = frame:FindFirstChild("Fire")
                    if fireButton then
                        -- Debugging: In ra thÃ´ng tin
                        print("ÄÃ£ tÃ¬m tháº¥y Fire button!")
                        -- Gá»­i sá»± kiá»n click thá»§ cÃ´ng
                        fireButton.MouseButton1Click:Fire()
                        return
                    end
                end
            end
        end

        -- Kiá»m tra BlasterGui vÃ  ShootButton
        local blasterGui = playerGui:FindFirstChild("BlasterGui")
        if blasterGui then
            local buttons = blasterGui:FindFirstChild("Buttons")
            if buttons then
                local shootButton = buttons:FindFirstChild("ShootButton")
                if shootButton then
                    -- Debugging: In ra thÃ´ng tin
                    print("ÄÃ£ tÃ¬m tháº¥y ShootButton!")
                    -- Gá»­i sá»± kiá»n click thá»§ cÃ´ng
                    shootButton.MouseButton1Click:Fire()
                    return
                end
            end
        end
    end

    -- Náº¿u khÃ´ng cÃ³ nÃºt nÃ o thÃ¬ thá»±c hiá»n click máº·c Äá»nh
    click()
end

-- Rainbow effect
local rainbowHue = 0
task.spawn(function()
    while true do
        rainbowHue = (rainbowHue + 0.01) % 1
        task.wait(0.01)
    end
end)

local function getRainbowColor()
    return Color3.fromHSV(rainbowHue, 1, 1)
end

-- Sound definitions
local sounds = {
    ["RIFK7"] = "rbxassetid://9102080552",
    ["Bubble"] = "rbxassetid://9102092728",
    ["Minecraft"] = "rbxassetid://5869422451",
    ["Cod"] = "rbxassetid://160432334",
    ["Bameware"] = "rbxassetid://6565367558",
    ["Neverlose"] = "rbxassetid://6565370984",
    ["Gamesense"] = "rbxassetid://4817809188",
    ["Yamete"] = "rbxassetid://103267082494666",
}

-- Create Sound instance
local SoundService = game:GetService("SoundService")
local hitSound = Instance.new("Sound")
hitSound.Volume = 3
hitSound.Parent = SoundService

-- Sound pool for multiple sound playback
local soundPool = {}
local soundIndex = 1

local function getNextSound()
    if soundIndex > #soundPool then
        local s = hitSound:Clone()
        s.Parent = workspace
        s.Looped = false
        table.insert(soundPool, s)
    end
    local s = soundPool[soundIndex]
    soundIndex = soundIndex + 1
    return s
end

local function playHitSound()
    local s = getNextSound()
    s:Stop()
    s:Play()
end

-- Global variable to store hit sound settings
getgenv().YeuTuyen.HitSoundEnabled = true
getgenv().YeuTuyen.HitSoundSelect = "Neverlose"

RunService.RenderStepped:Connect(function()
    if TriggerBotEnabled then
        local part = GetBestTargetPart()
        if part then
            task.spawn(function()
                local cap = part
                task.wait(0)
                if distToCursor(cap) <= fovRadius then
                    local origin = Camera.CFrame.Position
                    local direction = (cap.Position - origin)
                    local rayParams = RaycastParams.new()
                    rayParams.FilterType = Enum.RaycastFilterType.Blacklist
                    rayParams.FilterDescendantsInstances = {LocalPlayer.Character}
                    local result = workspace:Raycast(origin, direction, rayParams)
                    if result and result.Instance:IsDescendantOf(cap.Parent) then
                        shoot()
                    end
                end
            end)
        end
    end
end)

RunService.RenderStepped:Connect(function()
    if HitboxEnabled then
        for _, player in ipairs(Players:GetPlayers()) do
            if player.Name ~= LocalPlayer.Name then
                pcall(function()
                    player.Character.HumanoidRootPart.Size = Vector3.new(HitboxSize, HitboxSize, HitboxSize)
                    player.Character.HumanoidRootPart.Transparency = HitboxTransparency
                    player.Character.HumanoidRootPart.BrickColor = BrickColor.new("Really black")
                    player.Character.HumanoidRootPart.Material = "Neon"
                    player.Character.HumanoidRootPart.CanCollide = false
                end)
            end
        end
    else
        for _, player in ipairs(Players:GetPlayers()) do
            if player.Name ~= LocalPlayer.Name then
                pcall(function()
                    player.Character.HumanoidRootPart.Size = Vector3.new(2, 2, 1)
                    player.Character.HumanoidRootPart.Transparency = 1
                    player.Character.HumanoidRootPart.BrickColor = BrickColor.new("Medium stone grey")
                    player.Character.HumanoidRootPart.Material = "Plastic"
                    player.Character.HumanoidRootPart.CanCollide = false
                end)
            end
        end
    end
end)

RunService.Heartbeat:Connect(function(dt)
    if movementEnabled then 
        local char = LocalPlayer.Character
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        local hum = char and char:FindFirstChildOfClass("Humanoid")
        if hrp and hum then
            -- bÆ°á»c di chuyá»n
            local stepY = jumpPower * dt
            local stepXZ = walkSpeed * dt
            
            local moveDir = hum.MoveDirection
            if moveDir.Magnitude > 0 then
                hrp.CFrame = hrp.CFrame + (moveDir * stepXZ) + Vector3.new(0, stepY, 0)
            else
                hrp.CFrame = hrp.CFrame + Vector3.new(0, stepY, 0)
            end
        end
    end
end)

-- Aim loop
local lastTarget = nil
local lastHealth = {}

RunService.RenderStepped:Connect(function(delta)
    local target, part, hum = nil, nil, nil
    if getgenv().YeuTuyen.Mode == "Aimlock" then
        if getgenv().YeuTuyen.Status then
            target, part, hum = GetBestTarget()
        end
    elseif getgenv().YeuTuyen.Mode == "Aimbot" then
        target, part, hum = GetAimbotTarget()
        if fovCircle then
            fovCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
        end
    end

    -- Update ESP colors for previous target
    if lastTarget and lastTarget ~= target and lastTarget.Character then
        local hl = lastTarget.Character:FindFirstChild("ESPHighlight")
        local gui = lastTarget.Character:FindFirstChild("NameESP")
        if hl then
            hl.FillColor = rainbowMode and getRainbowColor() or Color3.fromRGB(255, 255, 255)
            hl.OutlineColor = rainbowMode and getRainbowColor() or Color3.fromRGB(255, 255, 255)
        end
        if gui and gui:FindFirstChild("NameLabel") then
            gui.NameLabel.TextColor3 = rainbowMode and getRainbowColor() or Color3.fromRGB(255, 255, 255)
        end
    end

    if target and part and hum and target.Character then
        -- Chá»n aimpart dá»±a trÃªn CheckIfJumped
        local aimPartName = getgenv().YeuTuyen.Hitpart
        if getgenv().YeuTuyen.CheckIfJumped and hum:GetState() == Enum.HumanoidStateType.Freefall then
            aimPartName = getgenv().YeuTuyen.CheckIfJumpedAimPart
        end
        local aimPart = target.Character:FindFirstChild(aimPartName) or part 

        -- Ãp dá»¥ng UseShake
        if getgenv().YeuTuyen.UseShake and aimPart then
            pcall(function()
                local shakeVec = Vector3.new(
                    math.random(-getgenv().YeuTuyen.ShakePower, getgenv().YeuTuyen.ShakePower),
                    math.random(-getgenv().YeuTuyen.ShakePower, getgenv().YeuTuyen.ShakePower),
                    math.random(-getgenv().YeuTuyen.ShakePower, getgenv().YeuTuyen.ShakePower)
                ) * 0.1
                aimPart.Velocity = aimPart.Velocity + shakeVec
                aimPart.AssemblyLinearVelocity = aimPart.AssemblyLinearVelocity + shakeVec
            end)
        end

        -- Ãp dá»¥ng UnderGround
        if getgenv().YeuTuyen.UnderGround and aimPart then
            pcall(function()
                aimPart.Velocity = Vector3.new(aimPart.Velocity.X, 0, aimPart.Velocity.Z)
                aimPart.AssemblyLinearVelocity = Vector3.new(aimPart.AssemblyLinearVelocity.X, 0, aimPart.AssemblyLinearVelocity.Z)
            end)
        end

        -- Ãp dá»¥ng DetectDesync
        if getgenv().YeuTuyen.DetectDesync and target.Character:FindFirstChild("HumanoidRootPart") and
            target.Character.HumanoidRootPart.Velocity.Magnitude > getgenv().YeuTuyen.Detection and aimPart then
            pcall(function()
                aimPart.Velocity = Vector3.new(0, 0, 0)
                aimPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
            end)
        end

        -- Ãp dá»¥ng AutoPingSets
        if getgenv().YeuTuyen.AutoPingSets then
            pcall(function()
                local pingvalue = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
                local split = string.split(pingvalue, "(")
                local ping = tonumber(split[1]) or 0
                if ping > 190 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.206547
                elseif ping > 180 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.19284
                elseif ping > 170 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.1923111
                elseif ping > 160 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.1823111
                elseif ping > 150 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.171
                elseif ping > 140 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.165773
                elseif ping > 130 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.1223333
                elseif ping > 120 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.143765
                elseif ping > 110 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.1455
                elseif ping > 100 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.130340
                elseif ping > 90 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.136
                elseif ping > 80 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.1347
                elseif ping > 70 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.119
                elseif ping > 60 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.12731
                elseif ping > 50 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.127668
                elseif ping > 40 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.125
                elseif ping > 30 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.11
                elseif ping > 20 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.12588
                elseif ping > 10 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.9
                end
            end)
        end

        -- Dá»± ÄoÃ¡n chuyá»n Äá»ng
        local predictVec = aimPart.Position
        if getgenv().YeuTuyen.PredictMovement and aimPart then
            predictVec = aimPart.Position + aimPart.Velocity * getgenv().YeuTuyen.PredictionVelocity
        end

        if getgenv().YeuTuyen.Status then
            local currentLookAt = Camera.CFrame.LookVector * 1000 + Camera.CFrame.Position
            local targetLookAt = predictVec
            local lerpedLookAt = currentLookAt:Lerp(targetLookAt, AIM_SMOOTHNESS)
            Camera.CFrame = CFrame.lookAt(Camera.CFrame.Position, lerpedLookAt)
        end

        -- Update ESP for current target
        getgenv().YeuTuyen.SelectedTargets[target.Name] = true
        if updateESP then
            updateESP(target)
        end

        -- Show target notification
        if lastTarget ~= target and sendTargetNotification then
            sendTargetNotification(target)
        end

        -- Health change detection
        local currentHealth = hum.Health
        local prevHealth = lastHealth[target] or currentHealth
        if currentHealth < prevHealth then
            local hl = target.Character:FindFirstChild("ESPHighlight")
            if hl and getRainbowColor then
                local originalOutlineColor = hl.OutlineColor
                local originalFillColor = hl.FillColor
                hl.OutlineColor = getRainbowColor()
                if getgenv().YeuTuyen.ESPEnabled then
                    hl.FillTransparency = 0.4
                end
                task.delay(2, function()
                    if hl and hl.Parent then
                        hl.OutlineColor = originalOutlineColor
                        hl.FillColor = originalFillColor
                        hl.FillTransparency = 0.4
                    end
                end)
            end
        end
        lastHealth[target] = currentHealth
    end

    lastTarget = target
end)

-- Teleport section
local function getBestTargetForTeleport()
    local closestDowned = nil
    local closestNormal = nil
    local downedDist = math.huge
    local normalDist = math.huge
    for name, _ in pairs(getgenv().YeuTuyen.SelectedTargets) do
        local plr = Players:FindFirstChild(name)
        if plr and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = plr.Character.HumanoidRootPart
            local myHrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if myHrp then
                local dist = (myHrp.Position - hrp.Position).Magnitude
                local bodyEffects = plr.Character:FindFirstChild("BodyEffects")
                local isKO = bodyEffects and bodyEffects:FindFirstChild("K.O") and bodyEffects["K.O"].Value
                if isKO and dist < downedDist then
                    closestDowned = plr
                    downedDist = dist
                elseif not isKO and dist < normalDist then
                    closestNormal = plr
                    normalDist = dist
                end
            end
        end
    end
    return closestDowned or closestNormal
end

local function teleportToTarget()
    local target = getBestTargetForTeleport()
    if not target or not getgenv().YeuTuyen.SelectedTargets[target.Name] then
        sendNotification("Teleport", "No valid target in selected list.", 2)
        return
    end
    local char = target.Character
    if not char or not char:FindFirstChild("HumanoidRootPart") then
        sendNotification("Teleport", "Cannot teleport to " .. target.Name, 2)
        return
    end
    local myChar = LocalPlayer.Character
    local myHRP = myChar and myChar:FindFirstChild("HumanoidRootPart")
    local targetHRP = char:FindFirstChild("HumanoidRootPart")
    if not myHRP or not targetHRP then return end
    local bodyEffects = char:FindFirstChild("BodyEffects")
    local isKO = bodyEffects and bodyEffects:FindFirstChild("K.O") and bodyEffects["K.O"].Value
    if isKO then
        myHRP.CFrame = CFrame.new(targetHRP.Position)
        sendNotification("Teleport", "Teleported to downed: " .. target.Name, 2)
        local VirtualInputManager = game:GetService("VirtualInputManager")
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
        task.wait(0.1)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
    else
        myHRP.CFrame = CFrame.new(targetHRP.Position + Vector3.new(2, 0, 0))
        sendNotification("Teleport", "Teleported above alive target: " .. target.Name, 2)
    end
end

UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Enum.KeyCode.T then
        teleportToTarget()
    end
end)

-- Theo dÃµi mÃ¡u Äá» gá»i hiá»u á»©ng
local function TrackHealth(plr)
    local char = plr.Character
    if not char then return end
    local hum = char:FindFirstChildOfClass("Humanoid")
    if not hum then return end

    local lastHealth = hum.Health
    hum.HealthChanged:Connect(function(newHealth)
        if newHealth < lastHealth then
            RainbowHitEffect(char)
            if getgenv().YeuTuyen.HitSoundEnabled then
                playHitSound()
            end
        end
        lastHealth = newHealth
    end)
end

-- Theo dÃµi player spawn
Players.PlayerAdded:Connect(function(plr)
    plr.CharacterAdded:Connect(function()
        task.wait(1)
        TrackHealth(plr)
    end)
end)
for _, plr in ipairs(Players:GetPlayers()) do
    if plr ~= LocalPlayer then
        if plr.Character then TrackHealth(plr) end
        plr.CharacterAdded:Connect(function()
            task.wait(1)
            TrackHealth(plr)
        end)
    end
end

-- KO detection
local lastDowned = {}
RunService.Heartbeat:Connect(function()
    for name, _ in pairs(getgenv().YeuTuyen.SelectedTargets) do
        local plr = Players:FindFirstChild(name)
        if plr and plr.Character then
            local bodyEffects = plr.Character:FindFirstChild("BodyEffects")
            local isKO = bodyEffects and bodyEffects:FindFirstChild("K.O") and bodyEffects["K.O"].Value
            if isKO and not lastDowned[name] then
                lastDowned[name] = true
                sendNotification("KO Alert", name .. " just got knocked out!", 2)
            elseif not isKO then
                lastDowned[name] = false
            end
        end
    end
end)

-- Player join/leave notifications
Players.PlayerAdded:Connect(function(player)
    task.wait(1)
    if getgenv().YeuTuyen.SelectedTargets[player.Name] then
        sendNotification("Player", player.Name .. " rejoined the game.", 2)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    if getgenv().YeuTuyen.SelectedTargets[player.Name] then
        sendNotification("Player", player.Name .. " left the game.", 2)
    end
end)

-- UI Setup in Obsidian (converted from Venyx)
local aimGroup = Tabs.Main:AddLeftGroupbox("Aimbot Settings", "boxes")

aimGroup:AddButton({
    Text = "Switch Aim Mode",
    Func = function()
        if getgenv().YeuTuyen.Mode == "Aimbot" then
            getgenv().YeuTuyen.Mode = "Aimlock"
            fovCircle.Visible = false
        else
            getgenv().YeuTuyen.Mode = "Aimbot"
            fovCircle.Visible = true
        end

        -- Reset target list khi Äá»i cháº¿ Äá»
        getgenv().YeuTuyen.SelectedTargets = {}

        sendNotification("Mode Switch", "Switched to " .. getgenv().YeuTuyen.Mode .. " (Targets Cleared)", 2)
    end,
    DoubleClick = false,
    Tooltip = "Switch between Aimbot and Aimlock",
})

aimGroup:AddDropdown("AimPart", {
    Values = {"Head", "UpperTorso", "HumanoidRootPart", "Torso"},
    Default = "Head",
    Multi = false,
    Text = "Aim Part",
    Tooltip = "Select aim part",
    Callback = function(value)
        getgenv().YeuTuyen.Hitpart = value
        sendNotification("Aim Part", "Set to " .. value, 2)
    end,
})

aimGroup:AddToggle("AutoPrediction", {
    Text = "Auto Prediction",
    Default = false,
    Tooltip = "Enable auto prediction",
    Callback = function(value)
        getgenv().YeuTuyen.PredictMovement = value
        sendNotification("Auto Prediction", value and "Enabled" or "Disabled", 2)
    end,
})

aimGroup:AddToggle("TeamCheck", {
    Text = "TeamCheck",
    Default = false,
    Tooltip = "Enable team check",
    Callback = function(value)
        teamCheck = value
        sendNotification("TeamCheck", value and "Enabled" or "Disabled", 2)
    end,
})

-- FOV Circle Toggle and Slider
aimGroup:AddToggle("FOVCircle", {
    Text = "FOV Circle",
    Default = fovCircle.Visible,
    Tooltip = "Show FOV circle",
    Callback = function(value)
        fovCircle.Visible = value
    end,
})

aimGroup:AddSlider("FOVRadius", {
    Text = "FOV Radius",
    Default = AIM_FOV,
    Min = 20,
    Max = 500,
    Rounding = 0,
    Compact = false,
    Callback = function(value)
        AIM_FOV = value
        fovCircle.Radius = value
    end,
})

-- Aim Smoothness Slider
aimGroup:AddSlider("AimSmoothness", {
    Text = "Aim Smoothness",
    Default = AIM_SMOOTHNESS * 100,
    Min = 0,
    Max = 100,
    Rounding = 0,
    Compact = false,
    Callback = function(value)
        AIM_SMOOTHNESS = value / 100
    end,
})

aimGroup:AddToggle("Triggerbot", {
    Text = "Triggerbot",
    Default = true,
    Tooltip = "Enable triggerbot",
    Callback = function(value)
        TriggerBotEnabled = value
        sendNotification("Triggerbot", value and "ON" or "OFF")
    end,
})

-- Triggerbot FOV Radius
aimGroup:AddSlider("TriggerbotFOV", {
    Text = "Triggerbot FOV",
    Default = fovRadius,
    Min = 10,
    Max = 200,
    Rounding = 0,
    Compact = false,
    Callback = function(value)
        fovRadius = value
        sendNotification("Triggerbot", "FOV set to " .. value, 2)
    end,
})

-- HitSound Settings
local hitSoundGroup = Tabs.Main:AddRightGroupbox("HitSound Settings", "boxes")
hitSoundGroup:AddToggle("HitSoundEnabled", {
    Text = "HitSoundEnabled",
    Default = true,
    Tooltip = "Enable hit sound",
    Callback = function(value)
        getgenv().YeuTuyen.HitSoundEnabled = value
        sendNotification("HitSound", value and "Enabled" or "Disabled", 2)
    end,
})

hitSoundGroup:AddDropdown("HitSoundSelect", {
    Values = {"RIFK7", "Bubble", "Minecraft", "Cod", "Bameware", "Neverlose", "Gamesense", "Yamete"},
    Default = "Neverlose",
    Multi = false,
    Text = "HitSoundSelect",
    Tooltip = "Select hit sound",
    Callback = function(value)
        local id = sounds[value]
        if id then
            hitSound.SoundId = id
            getgenv().YeuTuyen.HitSoundSelect = value
            sendNotification("HitSound", "Selected: " .. value, 2)
        end
    end,
})

hitSoundGroup:AddToggle("Hitbox", {
    Text = "Hitbox",
    Default = false,
    Tooltip = "Enable hitbox",
    Callback = function(value)
        HitboxEnabled = value
        sendNotification("Hitbox", value and "ON" or "OFF")
    end,
})

hitSoundGroup:AddSlider("HitboxTransparency", {
    Text = "Hitbox Transparency",
    Default = 0.9,
    Min = 0,
    Max = 1,
    Rounding = 2,
    Compact = false,
    Callback = function(value)
        HitboxTransparency = value
    end,
})

hitSoundGroup:AddSlider("HitboxSize", {
    Text = "Hitbox Size",
    Default = 15,
    Min = 5,
    Max = 50,
    Rounding = 0,
    Compact = false,
    Callback = function(value)
        HitboxSize = value
    end,
})

-- ESP Toggle
hitSoundGroup:AddToggle("ESP", {
    Text = "ESP",
    Default = getgenv().YeuTuyen.ESPEnabled,
    Tooltip = "Enable ESP",
    Callback = function(value)
        getgenv().YeuTuyen.ESPEnabled = value
        sendNotification("ESP", value and "ESP Enabled" or "ESP Disabled", 2)
    end,
})

-- Tracer Toggle
hitSoundGroup:AddToggle("Tracer", {
    Text = "Tracer",
    Default = false,
    Tooltip = "Enable tracer",
    Callback = function(value)
        tracerEnabled = value
        sendNotification("Tracer", value and "Tracer Enabled" or "Tracer Disabled", 2)
        if not value then
            for _, tracer in pairs(tracers) do
                tracer:Remove()
            end
            tracers = {}
        end
    end,
})

-- Rainbow Mode Toggle
hitSoundGroup:AddToggle("RainbowMode", {
    Text = "Rainbow Mode",
    Default = true,
    Tooltip = "Enable rainbow mode",
    Callback = function(value)
        rainbowMode = value
        sendNotification("Rainbow Mode", value and "Rainbow Mode Enabled" or "Rainbow Mode Disabled", 2)
    end,
})

-- Set Target Keybind
local targetKey = Enum.KeyCode.Q
hitSoundGroup:AddKeyPicker("SetTargetKey", {
    Default = "Q",
    SyncToggleState = false,
    Mode = "Toggle",
    Text = "Set Target Key",
    NoUI = false,
    Callback = function(Value)
        SelectClosestToMouse()
    end,
    ChangedCallback = function(newKey)
        targetKey = newKey
        sendNotification("Set Target Key", "Set to " .. newKey.Name, 2)
    end,
})

hitSoundGroup:AddToggle("Movement", {
    Text = "Movement",
    Default = false,
    Tooltip = "Enable movement",
    Callback = function(value)
        movementEnabled = value
        sendNotification("Movement", value and "ON" or "OFF", 2)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
            LocalPlayer.Character.Humanoid.UseJumpPower = true
        end
    end,
})

-- Keybind for Toggle Movement
hitSoundGroup:AddKeyPicker("ToggleMovementKey", {
    Default = "Z",
    SyncToggleState = false,
    Mode = "Toggle",
    Text = "Toggle Movement Key",
    NoUI = false,
    Callback = function(Value)
        movementEnabled = not movementEnabled
        sendNotification("Movement", movementEnabled and "ON" or "OFF", 2)
    end,
    ChangedCallback = function(newKey)
        sendNotification("Movement Key", "Set to " .. newKey.Name, 2)
    end,
})

-- Sliders for Movement
hitSoundGroup:AddSlider("WalkSpeed", {
    Text = "WalkSpeed",
    Default = 30,
    Min = 16,
    Max = 300,
    Rounding = 0,
    Compact = false,
    Callback = function(value)
        walkSpeed = value
    end,
})

hitSoundGroup:AddSlider("JumpPower", {
    Text = "JumpPower",
    Default = 60,
    Min = 50,
    Max = 300,
    Rounding = 0,
    Compact = false,
    Callback = function(value)
        jumpPower = value
    end,
})

hitSoundGroup:AddToggle("KeybindMenuOpen", {
    Default = Library.KeybindFrame.Visible,
    Text = "Open Keybind Menu",
    Callback = function(value)
        Library.KeybindFrame.Visible = value
    end,
})
hitSoundGroup:AddToggle("ShowCustomCursor", {
    Text = "Custom Cursor",
    Default = true,
    Callback = function(Value)
        Library.ShowCustomCursor = Value
    end,
})
hitSoundGroup:AddDropdown("NotificationSide", {
    Values = { "Left", "Right" },
    Default = "Right",
    Text = "Notification Side",
    Callback = function(Value)
        Library:SetNotifySide(Value)
    end,
})
hitSoundGroup:AddDropdown("DPIDropdown", {
    Values = { "50%", "75%", "100%", "125%", "150%", "175%", "200%" },
    Default = "100%",
    Text = "DPI Scale",
    Callback = function(Value)
        Value = Value:gsub("%%", "")
        local DPI = tonumber(Value)
        Library:SetDPIScale(DPI)
    end,
})
hitSoundGroup:AddDivider()
hitSoundGroup:AddLabel("Menu bind"):AddKeyPicker("MenuKeybind", { Default = "LeftAlt", NoUI = true, Text = "Menu keybind" })

hitSoundGroup:AddButton("Unload", function()
    Library:Unload()
end)

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager.
SaveManager:IgnoreThemeSettings()

-- Adds our MenuKeybind to the ignore list
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
ThemeManager:SetFolder("MyScriptHub")
SaveManager:SetFolder("MyScriptHub/specific-game")

-- Builds our config menu on the right side of our tab
SaveManager:BuildConfigSection(Tabs["UI Settings"])

-- Builds our theme menu (with plenty of built in themes) on the left side
ThemeManager:ApplyToTab(Tabs["UI Settings"])

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
