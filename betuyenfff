local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

local Window = Library:CreateWindow({
    Title = "nigga.lol",
    Footer = "nigga.lol | vhuy-anhchangm52",
    Icon = 5013109572,
    NotifySide = "Right",
    ShowCustomCursor = true,
})

local Tabs = {
    Main = Window:AddTab("Main", "user"),
    UI_Settings = Window:AddTab("UI Settings", "settings"),
}

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()
local AIM_RADIUS = 300
local AIM_FOV = 100
local AIM_SMOOTHNESS = 0.9
local TriggerBotEnabled = true
local fovRadius = 20
local movementEnabled = false
local jumpPower = 50
local walkSpeed = 16
local teamCheck = false
local HitboxEnabled = false
local HitboxTransparency = 0.9
local HitboxSize = 15

getgenv().YeuTuyen = {
    Status = true,
    Hitpart = "Head",
    SelectedTargets = {},
    ESPEnabled = true,
    Mode = "Aimlock",
    CheckIfJumped = true,
    CheckIfJumpedAimPart = "HumanoidRootPart",
    AutoPingSets = true,
    UseShake = true,
    ShakePower = 1,
    PredictMovement = false,
    PredictionVelocity = 0.17221418,
    UnderGround = false,
    DetectDesync = true,
    Detection = 75,
}

local fovCircle = Drawing.new("Circle")
fovCircle.Visible = false
fovCircle.Radius = AIM_FOV
fovCircle.Thickness = 2
fovCircle.NumSides = 100
fovCircle.Color = Color3.fromRGB(255, 255, 255)
fovCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

local colorValue = 255
local increasing = false
task.spawn(function()
    while true do
        task.wait(0)
        if increasing then
            colorValue = colorValue + 1
            if colorValue >= 255 then
                increasing = false
            end
        else
            colorValue = colorValue - 1
            if colorValue <= 0 then
                increasing = true
            end
        end
        fovCircle.Color = Color3.fromRGB(colorValue, colorValue, colorValue)
    end
end)

local Notifications = {}
local TargetNotifications = {}

local function sendNotification(title, text, duration)
    local notifGui = Instance.new("ScreenGui")
    notifGui.Name = "DhuyxNotification_" .. tostring(tick())
    notifGui.Parent = game:GetService("CoreGui")
    notifGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    notifGui.DisplayOrder = 999999 - #Notifications
    notifGui.IgnoreGuiInset = true
    notifGui.ResetOnSpawn = false
    local offsetY = 20 + (#Notifications * 80)
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 280, 0, 70)
    frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    frame.BorderSizePixel = 0
    frame.AnchorPoint = Vector2.new(1, 1)
    frame.Position = UDim2.new(1, -20, 1, -offsetY)
    frame.Transparency = 1
    frame.Parent = notifGui
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = frame
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(60, 60, 60)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 40, 40))
    }
    gradient.Rotation = 90
    gradient.Parent = frame
    local stroke = Instance.new("UIStroke")
    stroke.Color = Color3.fromRGB(255, 179, 186)
    stroke.Thickness = 2
    stroke.Transparency = 0.5
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Parent = frame
    local shadow = Instance.new("ImageLabel")
    shadow.Size = UDim2.new(1, 20, 1, 20)
    shadow.Position = UDim2.new(0, -10, 0, -10)
    shadow.Image = "rbxassetid://1316045217"
    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    shadow.ImageTransparency = 0.6
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(10, 10, 118, 118)
    shadow.ZIndex = -1
    shadow.BackgroundTransparency = 1
    shadow.Parent = frame
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -10, 0, 25)
    titleLabel.Position = UDim2.new(0, 5, 0, 5)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = title or "Nigga.lol"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 16
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.TextTruncate = Enum.TextTruncate.AtEnd
    titleLabel.Parent = frame
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, -10, 1, -35)
    textLabel.Position = UDim2.new(0, 5, 0, 30)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = text or "Notification"
    textLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    textLabel.Font = Enum.Font.Gotham
    textLabel.TextSize = 14
    textLabel.TextWrapped = true
    textLabel.TextXAlignment = Enum.TextXAlignment.Left
    textLabel.TextTruncate = Enum.TextTruncate.AtEnd
    textLabel.Parent = frame
    table.insert(Notifications, notifGui)
    local fadeIn = TweenService:Create(frame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 0})
    fadeIn:Play()
    task.spawn(function()
        task.wait(duration or 3)
        local fadeOut = TweenService:Create(frame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {Transparency = 1})
        fadeOut:Play()
        fadeOut.Completed:Connect(function()
            for i, gui in ipairs(Notifications) do
                if gui == notifGui then
                    table.remove(Notifications, i)
                    break
                end
            end
            notifGui:Destroy()
            for i, gui in ipairs(Notifications) do
                local frame = gui:FindFirstChildOfClass("Frame")
                if frame then
                    local newOffsetY = 20 + ((i - 1) * 80)
                    local tween = TweenService:Create(frame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(1, -20, 1, -newOffsetY)})
                    tween:Play()
                end
            end
        end)
    end)
end

local function sendTargetNotification(plr)
    local notifGui = Instance.new("ScreenGui")
    notifGui.Name = "TargetNotification_" .. plr.Name
    notifGui.Parent = game:GetService("CoreGui")
    notifGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    notifGui.IgnoreGuiInset = true
    notifGui.ResetOnSpawn = false
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 250, 0, 150)
    frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    frame.BorderSizePixel = 0
    frame.Position = UDim2.new(0, 20, 0.5, -75)
    frame.Transparency = 0
    frame.Parent = notifGui
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = frame
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(60, 60, 60)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(40, 40, 40))
    }
    gradient.Rotation = 90
    gradient.Parent = frame
    local stroke = Instance.new("UIStroke")
    stroke.Color = Color3.fromRGB(255, 179, 186)
    stroke.Thickness = 2
    stroke.Transparency = 0.5
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Parent = frame
    local avatar = Instance.new("ImageLabel")
    avatar.Size = UDim2.new(0, 50, 0, 50)
    avatar.Position = UDim2.new(0, 10, 0, 10)
    avatar.BackgroundTransparency = 1
    avatar.Image = Players:GetUserThumbnailAsync(plr.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size48x48)
    avatar.Parent = frame
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -70, 0, 25)
    titleLabel.Position = UDim2.new(0, 70, 0, 10)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = "Target"
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.TextSize = 16
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.Parent = frame
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Size = UDim2.new(1, -10, 0, 20)
    nameLabel.Position = UDim2.new(0, 10, 0, 60)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = plr.DisplayName .. " (@" .. plr.Name .. ")"
    nameLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    nameLabel.Font = Enum.Font.Gotham
    nameLabel.TextSize = 14
    nameLabel.TextXAlignment = Enum.TextXAlignment.Left
    nameLabel.Parent = frame
    local ageLabel = Instance.new("TextLabel")
    ageLabel.Size = UDim2.new(1, -10, 0, 20)
    ageLabel.Position = UDim2.new(0, 10, 0, 80)
    ageLabel.BackgroundTransparency = 1
    ageLabel.Text = "Age: " .. plr.AccountAge .. " days"
    ageLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    ageLabel.Font = Enum.Font.Gotham
    ageLabel.TextSize = 14
    ageLabel.TextXAlignment = Enum.TextXAlignment.Left
    ageLabel.Parent = frame
    local status = plr.Character and plr.Character:FindFirstChildOfClass("Humanoid") and plr.Character.Humanoid.Health > 0 and "Alive" or "Dead"
    local health = plr.Character and plr.Character:FindFirstChildOfClass("Humanoid") and plr.Character.Humanoid.Health or 0
    local statusLabel = Instance.new("TextLabel")
    statusLabel.Size = UDim2.new(1, -10, 0, 20)
    statusLabel.Position = UDim2.new(0, 10, 0, 100)
    statusLabel.BackgroundTransparency = 1
    statusLabel.Text = "Status: " .. status .. " | Health: " .. math.floor(health)
    statusLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
    statusLabel.Font = Enum.Font.Gotham
    statusLabel.TextSize = 14
    statusLabel.TextXAlignment = Enum.TextXAlignment.Left
    statusLabel.Parent = frame
    table.insert(TargetNotifications, notifGui)
    task.spawn(function()
        task.wait(3)
        local slideOut = TweenService:Create(frame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {Position = UDim2.new(0, -300, 0.5, -75)})
        slideOut:Play()
        slideOut.Completed:Connect(function()
            for i, gui in ipairs(TargetNotifications) do
                if gui == notifGui then
                    table.remove(TargetNotifications, i)
                    break
                end
            end
            notifGui:Destroy()
        end)
    end)
end

local function removeESP(plr)
    if plr.Character then
        local char = plr.Character
        local hl = char:FindFirstChild("ESPHighlight")
        if hl then hl:Destroy() end
        local gui = char:FindFirstChild("NameESP")
        if gui then gui:Destroy() end
    end
end

local tracerEnabled = false
local tracers = {}
local rainbowMode = false
local function updateESP(plr)
    if plr == LocalPlayer then return end
    if not plr.Character or not plr.Character:FindFirstChild("Head") then return end
    local char = plr.Character
    local head = char.Head
    
    local hl = char:FindFirstChild("ESPHighlight")
    if not hl then
        hl = Instance.new("Highlight")
        hl.Name = "ESPHighlight"
        hl.Adornee = char
        hl.FillTransparency = 0.4
        hl.OutlineTransparency = 0
        hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
        hl.Parent = char
    end
    local isSelected = getgenv().YeuTuyen.SelectedTargets[plr.Name]
    hl.FillColor = rainbowMode and getRainbowColor() or (isSelected and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 255, 255))
    hl.OutlineColor = rainbowMode and getRainbowColor() or Color3.fromRGB(255, 255, 255)

    local gui = char:FindFirstChild("NameESP")
    if not gui then
        gui = Instance.new("BillboardGui")
        gui.Name = "NameESP"
        gui.Adornee = head
        gui.Size = UDim2.new(0, 200, 0, 30)
        gui.StudsOffset = Vector3.new(0, 2.5, 0)
        gui.AlwaysOnTop = true
        gui.Parent = char
        local nameLabel = Instance.new("TextLabel")
        nameLabel.Name = "NameLabel"
        nameLabel.Size = UDim2.new(1, 0, 1, 0)
        nameLabel.BackgroundTransparency = 1
        nameLabel.TextStrokeTransparency = 0.5
        nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
        nameLabel.Font = Enum.Font.SourceSansBold
        nameLabel.TextScaled = true
        nameLabel.Parent = gui
    end
    local nameLabel = gui:FindFirstChild("NameLabel")
    if nameLabel then
        nameLabel.Text = plr.DisplayName .. " (" .. plr.Name .. ")"
        nameLabel.TextColor3 = rainbowMode and getRainbowColor() or (isSelected and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 255, 255))
    end

    if tracerEnabled then
        local tracer = tracers[plr.Name]
        if not tracer then
            tracer = Drawing.new("Line")
            tracer.Thickness = 2
            tracer.Transparency = 1
            tracers[plr.Name] = tracer
        end
        local screenPos, onScreen = Camera:WorldToViewportPoint(head.Position)
        if onScreen then
            tracer.Visible = true
            tracer.From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
            tracer.To = Vector2.new(screenPos.X, screenPos.Y)
            tracer.Color = rainbowMode and getRainbowColor() or (isSelected and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 255, 255))
        else
            tracer.Visible = false
        end
    else
        if tracers[plr.Name] then
            tracers[plr.Name]:Remove()
            tracers[plr.Name] = nil
        end
    end
end

local rainbowHue = 0
RunService.RenderStepped:Connect(function()
    rainbowHue = (rainbowHue + 0.01) % 1
end)

local function getRainbowColor()
    return Color3.fromHSV(rainbowHue, 1, 1)
end

local function RainbowHitEffect(char)
    if not char then return end
    local hl = char:FindFirstChild("ESPHighlight")
    if not hl then return end

    local effect = Instance.new("Highlight")
    effect.Adornee = char
    effect.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    effect.FillTransparency = 1
    effect.OutlineTransparency = 0
    effect.Parent = char

    local t = 0
    local conn
    conn = RunService.RenderStepped:Connect(function(dt)
        if t > 2 then
            effect:Destroy()
            conn:Disconnect()
        else
            t += dt
            effect.OutlineColor = getRainbowColor()
        end
    end)
end

RunService.RenderStepped:Connect(function()
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer then
            local char = plr.Character
            local head = char and char:FindFirstChild("Head")
            local hum = char and char:FindFirstChildOfClass("Humanoid")

            if char and head and hum and hum.Health > 0 then
                if getgenv().YeuTuyen.ESPEnabled then
                    local hl = char:FindFirstChild("ESPHighlight") or Instance.new("Highlight")
                    hl.Name = "ESPHighlight"
                    hl.Adornee = char
                    hl.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                    hl.FillTransparency = 0.4
                    hl.OutlineTransparency = 0
                    hl.Parent = char

                    local gui = char:FindFirstChild("NameESP") or Instance.new("BillboardGui")
                    if not char:FindFirstChild("NameESP") then
                        gui.Name = "NameESP"
                        gui.Adornee = head
                        gui.Size = UDim2.new(0, 200, 0, 30)
                        gui.StudsOffset = Vector3.new(0, 2.5, 0)
                        gui.AlwaysOnTop = true
                        gui.Parent = char
                        local nameLabel = Instance.new("TextLabel")
                        nameLabel.Name = "NameLabel"
                        nameLabel.Size = UDim2.new(1, 0, 1, 0)
                        nameLabel.BackgroundTransparency = 1
                        nameLabel.TextStrokeTransparency = 0.5
                        nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
                        nameLabel.Font = Enum.Font.SourceSansBold
                        nameLabel.TextScaled = true
                        nameLabel.Parent = gui
                    end
                end
            end
        end
    end
end)

local AimGroup = Tabs.Main:AddLeftGroupbox("Aim")

AimGroup:AddToggle("Status", {
    Text = "Status",
    Default = getgenv().YeuTuyen.Status,
    Callback = function(value)
        getgenv().YeuTuyen.Status = value
        sendNotification("Status", value and "ON" or "OFF", 2)
    end
})

AimGroup:AddToggle("CheckIfJumped", {
    Text = "Check If Jumped",
    Default = getgenv().YeuTuyen.CheckIfJumped,
    Callback = function(value)
        getgenv().YeuTuyen.CheckIfJumped = value
        sendNotification("CheckIfJumped", value and "ON" or "OFF", 2)
    end
})

AimGroup:AddDropdown("CheckIfJumpedAimPart", {
    Values = {"HumanoidRootPart", "Head"},
    Default = getgenv().YeuTuyen.CheckIfJumpedAimPart,
    Text = "CheckIfJumped AimPart",
    Callback = function(value)
        getgenv().YeuTuyen.CheckIfJumpedAimPart = value
        sendNotification("CheckIfJumped AimPart", value, 2)
    end
})

AimGroup:AddToggle("AutoPingSets", {
    Text = "Auto Ping Sets",
    Default = getgenv().YeuTuyen.AutoPingSets,
    Callback = function(value)
        getgenv().YeuTuyen.AutoPingSets = value
        sendNotification("AutoPingSets", value and "ON" or "OFF", 2)
    end
})

AimGroup:AddToggle("UseShake", {
    Text = "Use Shake",
    Default = getgenv().YeuTuyen.UseShake,
    Callback = function(value)
        getgenv().YeuTuyen.UseShake = value
        sendNotification("UseShake", value and "ON" or "OFF", 2)
    end
})

AimGroup:AddSlider("ShakePower", {
    Text = "Shake Power",
    Default = getgenv().YeuTuyen.ShakePower,
    Min = 0,
    Max = 10,
    Rounding = 1,
    Callback = function(value)
        getgenv().YeuTuyen.ShakePower = value
    end
})

AimGroup:AddToggle("PredictMovement", {
    Text = "Predict Movement",
    Default = getgenv().YeuTuyen.PredictMovement,
    Callback = function(value)
        getgenv().YeuTuyen.PredictMovement = value
        sendNotification("PredictMovement", value and "ON" or "OFF", 2)
    end
})

AimGroup:AddSlider("PredictionVelocity", {
    Text = "Prediction Velocity",
    Default = getgenv().YeuTuyen.PredictionVelocity,
    Min = 0,
    Max = 1,
    Rounding = 3,
    Callback = function(value)
        getgenv().YeuTuyen.PredictionVelocity = value
    end
})

AimGroup:AddToggle("UnderGround", {
    Text = "Under Ground",
    Default = getgenv().YeuTuyen.UnderGround,
    Callback = function(value)
        getgenv().YeuTuyen.UnderGround = value
        sendNotification("UnderGround", value and "ON" or "OFF", 2)
    end
})

AimGroup:AddToggle("DetectDesync", {
    Text = "Detect Desync",
    Default = getgenv().YeuTuyen.DetectDesync,
    Callback = function(value)
        getgenv().YeuTuyen.DetectDesync = value
        sendNotification("DetectDesync", value and "ON" or "OFF", 2)
    end
})

AimGroup:AddSlider("Detection", {
    Text = "Detection",
    Default = getgenv().YeuTuyen.Detection,
    Min = 0,
    Max = 100,
    Rounding = 0,
    Callback = function(value)
        getgenv().YeuTuyen.Detection = value
    end
})

AimGroup:AddDropdown("Mode", {
    Values = {"Aimlock", "Aimbot"},
    Default = getgenv().YeuTuyen.Mode,
    Text = "Mode",
    Callback = function(value)
        getgenv().YeuTuyen.Mode = value
        sendNotification("Mode", value, 2)
        fovCircle.Visible = value == "Aimbot"
    end
})

AimGroup:AddDropdown("Hitpart", {
    Values = {"Head", "HumanoidRootPart"},
    Default = getgenv().YeuTuyen.Hitpart,
    Text = "Hitpart",
    Callback = function(value)
        getgenv().YeuTuyen.Hitpart = value
        sendNotification("Hitpart", value, 2)
    end
})

AimGroup:AddSlider("FOV", {
    Text = "FOV",
    Default = AIM_FOV,
    Min = 0,
    Max = 500,
    Rounding = 0,
    Callback = function(value)
        AIM_FOV = value
        fovCircle.Radius = value
    end
})

AimGroup:AddSlider("Smoothness", {
    Text = "Smoothness",
    Default = AIM_SMOOTHNESS,
    Min = 0,
    Max = 1,
    Rounding = 2,
    Callback = function(value)
        AIM_SMOOTHNESS = value
    end
})

local MiscGroup = Tabs.Main:AddRightGroupbox("Misc")

MiscGroup:AddToggle("TriggerBot", {
    Text = "Trigger Bot",
    Default = TriggerBotEnabled,
    Callback = function(value)
        TriggerBotEnabled = value
        sendNotification("TriggerBot", value and "ON" or "OFF", 2)
    end
})

MiscGroup:AddToggle("TeamCheck", {
    Text = "Team Check",
    Default = teamCheck,
    Callback = function(value)
        teamCheck = value
        sendNotification("TeamCheck", value and "ON" or "OFF", 2)
    end
})

MiscGroup:AddToggle("HitboxEnabled", {
    Text = "Hitbox Enabled",
    Default = HitboxEnabled,
    Callback = function(value)
        HitboxEnabled = value
        sendNotification("HitboxEnabled", value and "ON" or "OFF", 2)
        for _, player in ipairs(Players:GetPlayers()) do
            if player.Name ~= LocalPlayer.Name then
                pcall(function()
                    if value then
                        player.Character.HumanoidRootPart.Size = Vector3.new(HitboxSize, HitboxSize, HitboxSize)
                        player.Character.HumanoidRootPart.Transparency = HitboxTransparency
                        player.Character.HumanoidRootPart.BrickColor = BrickColor.new("Really black")
                        player.Character.HumanoidRootPart.Material = "Neon"
                        player.Character.HumanoidRootPart.CanCollide = false
                    else
                        player.Character.HumanoidRootPart.Size = Vector3.new(2, 2, 1)
                        player.Character.HumanoidRootPart.Transparency = 1
                        player.Character.HumanoidRootPart.BrickColor = BrickColor.new("Medium stone grey")
                        player.Character.HumanoidRootPart.Material = "Plastic"
                        player.Character.HumanoidRootPart.CanCollide = false
                    end
                end)
            end
        end
    end
})

MiscGroup:AddSlider("HitboxTransparency", {
    Text = "Hitbox Transparency",
    Default = HitboxTransparency,
    Min = 0,
    Max = 1,
    Rounding = 2,
    Callback = function(value)
        HitboxTransparency = value
        if HitboxEnabled then
            for _, player in ipairs(Players:GetPlayers()) do
                if player.Name ~= LocalPlayer.Name then
                    pcall(function()
                        player.Character.HumanoidRootPart.Transparency = value
                    end)
                end
            end
        end
    end
})

MiscGroup:AddSlider("HitboxSize", {
    Text = "Hitbox Size",
    Default = HitboxSize,
    Min = 0,
    Max = 50,
    Rounding = 0,
    Callback = function(value)
        HitboxSize = value
        if HitboxEnabled then
            for _, player in ipairs(Players:GetPlayers()) do
                if player.Name ~= LocalPlayer.Name then
                    pcall(function()
                        player.Character.HumanoidRootPart.Size = Vector3.new(value, value, value)
                    end)
                end
            end
        end
    end
})

MiscGroup:AddToggle("Movement", {
    Text = "Movement",
    Default = movementEnabled,
    Callback = function(value)
        movementEnabled = value
        sendNotification("Movement", value and "ON" or "OFF", 2)
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
            LocalPlayer.Character.Humanoid.UseJumpPower = true
        end
    end
})

MiscGroup:AddSlider("WalkSpeed", {
    Text = "WalkSpeed",
    Default = walkSpeed,
    Min = 16,
    Max = 300,
    Rounding = 0,
    Callback = function(value)
        walkSpeed = value
    end
})

MiscGroup:AddSlider("JumpPower", {
    Text = "JumpPower",
    Default = jumpPower,
    Min = 50,
    Max = 300,
    Rounding = 0,
    Callback = function(value)
        jumpPower = value
    end
})

RunService.Heartbeat:Connect(function(dt)
    if movementEnabled then 
        local char = LocalPlayer.Character
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        local hum = char and char:FindFirstChildOfClass("Humanoid")
        if hrp and hum then
            local stepY = jumpPower * dt
            local stepXZ = walkSpeed * dt
            
            local moveDir = hum.MoveDirection
            if moveDir.Magnitude > 0 then
                hrp.CFrame = hrp.CFrame + (moveDir * stepXZ) + Vector3.new(0, stepY, 0)
            else
                hrp.CFrame = hrp.CFrame + Vector3.new(0, stepY, 0)
            end
        end
    end
end)

local VisualsGroup = Tabs.Main:AddLeftGroupbox("Visuals")

VisualsGroup:AddToggle("ESP", {
    Text = "ESP",
    Default = getgenv().YeuTuyen.ESPEnabled,
    Callback = function(value)
        getgenv().YeuTuyen.ESPEnabled = value
        sendNotification("ESP", value and "Enabled" or "Disabled", 2)
    end
})

VisualsGroup:AddToggle("Tracer", {
    Text = "Tracer",
    Default = tracerEnabled,
    Callback = function(value)
        tracerEnabled = value
        sendNotification("Tracer", value and "Enabled" or "Disabled", 2)
        if not value then
            for _, tracer in pairs(tracers) do
                tracer:Remove()
            end
            tracers = {}
        end
    end
})

VisualsGroup:AddToggle("RainbowMode", {
    Text = "Rainbow Mode",
    Default = rainbowMode,
    Callback = function(value)
        rainbowMode = value
        sendNotification("Rainbow Mode", value and "Enabled" or "Disabled", 2)
    end
})

local function GetBestTarget()
    local closest = math.huge
    local target = nil
    local part = nil
    local hum = nil
    for name, _ in pairs(getgenv().YeuTuyen.SelectedTargets) do
        local plr = Players:FindFirstChild(name)
        if plr and plr.Character and plr.Character:FindFirstChild("Head") and plr.Character.Humanoid.Health > 0 then
            local screenPos, onScreen = Camera:WorldToViewportPoint(plr.Character.Head.Position)
            if onScreen then
                local dist = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                if dist < closest and dist < AIM_RADIUS then
                    closest = dist
                    target = plr
                    part = plr.Character.Head
                    hum = plr.Character.Humanoid
                end
            end
        end
    end
    return target, part, hum
end

local function GetAimbotTarget()
    local closest = math.huge
    local target = nil
    local part = nil
    local hum = nil
    for name, _ in pairs(getgenv().YeuTuyen.SelectedTargets) do
        local plr = Players:FindFirstChild(name)
        if plr and plr.Character and plr.Character:FindFirstChild("Head") and plr.Character.Humanoid.Health > 0 then
            local screenPos, onScreen = Camera:WorldToViewportPoint(plr.Character.Head.Position)
            if onScreen then
                local dist = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                if dist < closest and dist < AIM_FOV then
                    closest = dist
                    target = plr
                    part = plr.Character.Head
                    hum = plr.Character.Humanoid
                end
            end
        end
    end
    return target, part, hum
end

local function SelectClosestToMouse()
    local closestDist = math.huge
    local closestPlr = nil
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("Head") then
            local screenPos, onScreen = Camera:WorldToViewportPoint(plr.Character.Head.Position)
            if onScreen then
                local dist = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(screenPos.X, screenPos.Y)).Magnitude
                if dist < closestDist then
                    closestDist = dist
                    closestPlr = plr
                end
            end
        end
    end
    if closestPlr then
        getgenv().YeuTuyen.SelectedTargets[closestPlr.Name] = true
        sendTargetNotification(closestPlr)
        sendNotification("Target Selected", closestPlr.Name, 2)
    end
end

local targetKey = Enum.KeyCode.Q
AimGroup:AddKeyPicker("SetTargetKey", {
    Default = "Q",
    Text = "Set Target Key",
    NoUI = false,
    Callback = function(Value)
        if Value then
            SelectClosestToMouse()
        end
    end,
    ChangedCallback = function(New)
        targetKey = New
        sendNotification("Set Target Key", "Set to " .. New.Name, 2)
    end
})

local movementKey = Enum.KeyCode.Z
MiscGroup:AddKeyPicker("ToggleMovementKey", {
    Default = "Z",
    Text = "Toggle Movement Key",
    NoUI = false,
    Callback = function(Value)
        if Value then
            movementEnabled = not movementEnabled
            sendNotification("Movement", movementEnabled and "ON" or "OFF", 2)
        end
    end,
    ChangedCallback = function(New)
        movementKey = New
        sendNotification("Movement Key", "Set to " .. New.Name, 2)
    end
})

local lastTarget = nil
local lastHealth = {}

RunService.RenderStepped:Connect(function(delta)
    local target, part, hum = nil, nil, nil
    if getgenv().YeuTuyen.Mode == "Aimlock" then
        if getgenv().YeuTuyen.Status then
            target, part, hum = GetBestTarget()
        end
    elseif getgenv().YeuTuyen.Mode == "Aimbot" then
        target, part, hum = GetAimbotTarget()
        if fovCircle then
            fovCircle.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
        end
    end

    if lastTarget and lastTarget ~= target and lastTarget.Character then
        local hl = lastTarget.Character:FindFirstChild("ESPHighlight")
        local gui = lastTarget.Character:FindFirstChild("NameESP")
        if hl then
            hl.FillColor = rainbowMode and getRainbowColor() or Color3.fromRGB(255, 255, 255)
            hl.OutlineColor = rainbowMode and getRainbowColor() or Color3.fromRGB(255, 255, 255)
        end
        if gui and gui:FindFirstChild("NameLabel") then
            gui.NameLabel.TextColor3 = rainbowMode and getRainbowColor() or Color3.fromRGB(255, 255, 255)
        end
    end

    if target and part and hum and target.Character then
        local aimPartName = getgenv().YeuTuyen.Hitpart
        if getgenv().YeuTuyen.CheckIfJumped and hum:GetState() == Enum.HumanoidStateType.Freefall then
            aimPartName = getgenv().YeuTuyen.CheckIfJumpedAimPart
        end
        local aimPart = target.Character:FindFirstChild(aimPartName) or part 

        if getgenv().YeuTuyen.UseShake and aimPart then
            pcall(function()
                local shakeVec = Vector3.new(
                    math.random(-getgenv().YeuTuyen.ShakePower, getgenv().YeuTuyen.ShakePower),
                    math.random(-getgenv().YeuTuyen.ShakePower, getgenv().YeuTuyen.ShakePower),
                    math.random(-getgenv().YeuTuyen.ShakePower, getgenv().YeuTuyen.ShakePower)
                ) * 0.1
                aimPart.Velocity = aimPart.Velocity + shakeVec
                aimPart.AssemblyLinearVelocity = aimPart.AssemblyLinearVelocity + shakeVec
            end)
        end

        if getgenv().YeuTuyen.UnderGround and aimPart then
            pcall(function()
                aimPart.Velocity = Vector3.new(aimPart.Velocity.X, 0, aimPart.Velocity.Z)
                aimPart.AssemblyLinearVelocity = Vector3.new(aimPart.AssemblyLinearVelocity.X, 0, aimPart.AssemblyLinearVelocity.Z)
            end)
        end

        if getgenv().YeuTuyen.DetectDesync and target.Character:FindFirstChild("HumanoidRootPart") and
            target.Character.HumanoidRootPart.Velocity.Magnitude > getgenv().YeuTuyen.Detection and aimPart then
            pcall(function()
                aimPart.Velocity = Vector3.new(0, 0, 0)
                aimPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
            end)
        end

        if getgenv().YeuTuyen.AutoPingSets then
            pcall(function()
                local pingvalue = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
                local split = string.split(pingvalue, "(")
                local ping = tonumber(split[1]) or 0
                if ping > 190 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.206547
                elseif ping > 180 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.19284
                elseif ping > 170 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.1923111
                elseif ping > 160 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.1823111
                elseif ping > 150 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.171
                elseif ping > 140 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.165773
                elseif ping > 130 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.1223333
                elseif ping > 120 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.143765
                elseif ping > 110 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.1455
                elseif ping > 100 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.130340
                elseif ping > 90 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.136
                elseif ping > 80 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.1347
                elseif ping > 70 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.119
                elseif ping > 60 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.12731
                elseif ping > 50 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.127668
                elseif ping > 40 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.125
                elseif ping > 30 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.11
                elseif ping > 20 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.12588
                elseif ping > 10 then
                    getgenv().YeuTuyen.PredictionVelocity = 0.9
                end
            end)
        end

        local predictVec = aimPart.Position
        if getgenv().YeuTuyen.PredictMovement and aimPart then
            predictVec = aimPart.Position + aimPart.Velocity * getgenv().YeuTuyen.PredictionVelocity
        end

        if getgenv().YeuTuyen.Status then
            local currentLookAt = Camera.CFrame.LookVector * 1000 + Camera.CFrame.Position
            local targetLookAt = predictVec
            local lerpedLookAt = currentLookAt:Lerp(targetLookAt, AIM_SMOOTHNESS)
            Camera.CFrame = CFrame.lookAt(Camera.CFrame.Position, lerpedLookAt)
        end

        getgenv().YeuTuyen.SelectedTargets[target.Name] = true
        if updateESP then
            updateESP(target)
        end

        if lastTarget ~= target and sendTargetNotification then
            sendTargetNotification(target)
        end

        local currentHealth = hum.Health
        local prevHealth = lastHealth[target] or currentHealth
        if currentHealth < prevHealth then
            local hl = target.Character:FindFirstChild("ESPHighlight")
            if hl and getRainbowColor then
                local originalOutlineColor = hl.OutlineColor
                local originalFillColor = hl.FillColor
                hl.OutlineColor = getRainbowColor()
                if getgenv().YeuTuyen.ESPEnabled then
                    hl.FillTransparency = 0.4
                end
                task.delay(2, function()
                    if hl and hl.Parent then
                        hl.OutlineColor = originalOutlineColor
                        hl.FillColor = originalFillColor
                        hl.FillTransparency = 0.4
                    end
                end)
            end
        end
        lastHealth[target] = currentHealth
    end

    lastTarget = target
end)

local function getBestTargetForTeleport()
    local closestDowned = nil
    local closestNormal = nil
    local downedDist = math.huge
    local normalDist = math.huge
    for name, _ in pairs(getgenv().YeuTuyen.SelectedTargets) do
        local plr = Players:FindFirstChild(name)
        if plr and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
            local hrp = plr.Character.HumanoidRootPart
            local myHrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
            if myHrp then
                local dist = (myHrp.Position - hrp.Position).Magnitude
                local bodyEffects = plr.Character:FindFirstChild("BodyEffects")
                local isKO = bodyEffects and bodyEffects:FindFirstChild("K.O") and bodyEffects["K.O"].Value
                if isKO and dist < downedDist then
                    closestDowned = plr
                    downedDist = dist
                elseif not isKO and dist < normalDist then
                    closestNormal = plr
                    normalDist = dist
                end
            end
        end
    end
    return closestDowned or closestNormal
end

local function teleportToTarget()
    local target = getBestTargetForTeleport()
    if not target or not getgenv().YeuTuyen.SelectedTargets[target.Name] then
        sendNotification("Teleport", "No valid target in selected list.", 2)
        return
    end
    local char = target.Character
    if not char or not char:FindFirstChild("HumanoidRootPart") then
        sendNotification("Teleport", "Cannot teleport to " .. target.Name, 2)
        return
    end
    local myChar = LocalPlayer.Character
    local myHRP = myChar and myChar:FindFirstChild("HumanoidRootPart")
    local targetHRP = char:FindFirstChild("HumanoidRootPart")
    if not myHRP or not targetHRP then return end
    local bodyEffects = char:FindFirstChild("BodyEffects")
    local isKO = bodyEffects and bodyEffects:FindFirstChild("K.O") and bodyEffects["K.O"].Value
    if isKO then
        myHRP.CFrame = CFrame.new(targetHRP.Position)
        sendNotification("Teleport", "Teleported to downed: " .. target.Name, 2)
        local VirtualInputManager = game:GetService("VirtualInputManager")
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
        task.wait(0.1)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
    else
        myHRP.CFrame = CFrame.new(targetHRP.Position + Vector3.new(2, 0, 0))
        sendNotification("Teleport", "Teleported above alive target: " .. target.Name, 2)
    end
end

UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Enum.KeyCode.T then
        teleportToTarget()
    end
end)

local function TrackHealth(plr)
    local char = plr.Character
    if not char then return end
    local hum = char:FindFirstChildOfClass("Humanoid")
    if not hum then return end

    local lastHealth = hum.Health
    hum.HealthChanged:Connect(function(newHealth)
        if newHealth < lastHealth then
            RainbowHitEffect(char)
            if getgenv().YeuTuyen.HitSoundEnabled then
                playHitSound()
            end
        end
        lastHealth = newHealth
    end)
end

Players.PlayerAdded:Connect(function(plr)
    plr.CharacterAdded:Connect(function()
        task.wait(1)
        TrackHealth(plr)
    end)
end)
for _, plr in ipairs(Players:GetPlayers()) do
    if plr ~= LocalPlayer then
        if plr.Character then TrackHealth(plr) end
        plr.CharacterAdded:Connect(function()
            task.wait(1)
            TrackHealth(plr)
        end)
    end
end

local lastDowned = {}
RunService.Heartbeat:Connect(function()
    for name, _ in pairs(getgenv().YeuTuyen.SelectedTargets) do
        local plr = Players:FindFirstChild(name)
        if plr and plr.Character then
            local bodyEffects = plr.Character:FindFirstChild("BodyEffects")
            local isKO = bodyEffects and bodyEffects:FindFirstChild("K.O") and bodyEffects["K.O"].Value
            if isKO and not lastDowned[name] then
                lastDowned[name] = true
                sendNotification("KO Alert", name .. " just got knocked out!", 2)
            elseif not isKO then
                lastDowned[name] = false
            end
        end
    end
end)

Players.PlayerAdded:Connect(function(player)
    task.wait(1)
    if getgenv().YeuTuyen.SelectedTargets[player.Name] then
        sendNotification("Player", player.Name .. " rejoined the game.", 2)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    if getgenv().YeuTuyen.SelectedTargets[player.Name] then
        sendNotification("Player", player.Name .. " left the game.", 2)
    end
end)

local function resetTargetList()
    getgenv().YeuTuyen.SelectedTargets = {}
    sendNotification("Reset Targets", "Target list cleared.", 2)
end

AimGroup:AddButton({
    Text = "Reset Targets",
    Func = resetTargetList,
    Tooltip = "Clears the selected target list"
})

AimGroup:AddKeyPicker("ResetTargetKey", {
    Default = "G",
    Text = "Reset Target Key",
    NoUI = false,
    Callback = function(Value)
        if Value then
            resetTargetList()
        end
    end,
    ChangedCallback = function(New)
        sendNotification("Reset Target Key", "Set to " .. New.Name, 2)
    end
})

local MenuGroup = Tabs.UI_Settings:AddLeftGroupbox("Menu")

MenuGroup:AddToggle("KeybindMenuOpen", {
    Default = Library.KeybindFrame.Visible,
    Text = "Open Keybind Menu",
    Callback = function(value)
        Library.KeybindFrame.Visible = value
    end,
})
MenuGroup:AddToggle("ShowCustomCursor", {
    Text = "Custom Cursor",
    Default = true,
    Callback = function(Value)
        Library.ShowCustomCursor = Value
    end,
})
MenuGroup:AddDropdown("NotificationSide", {
    Values = { "Left", "Right" },
    Default = "Right",
    Text = "Notification Side",
    Callback = function(Value)
        Library:SetNotifySide(Value)
    end,
})
MenuGroup:AddDropdown("DPIDropdown", {
    Values = { "50%", "75%", "100%", "125%", "150%", "175%", "200%" },
    Default = "100%",
    Text = "DPI Scale",
    Callback = function(Value)
        Value = Value:gsub("%%", "")
        local DPI = tonumber(Value)
        Library:SetDPIScale(DPI)
    end,
})
MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu bind"):AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })

MenuGroup:AddButton("Unload", function()
    Library:Unload()
end)

Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings()

SaveManager:SetIgnoreIndexes({ "MenuKeybind" })

ThemeManager:SetFolder("MyScriptHub")
SaveManager:SetFolder("MyScriptHub/specific-game")

SaveManager:BuildConfigSection(Tabs.UI_Settings)

ThemeManager:ApplyToTab(Tabs.UI_Settings)

SaveManager:LoadAutoloadConfig()
